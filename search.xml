<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>设计模式有那么难吗？——代理模式</title>
      <link href="2020/11/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%E5%90%97%EF%BC%9F%E2%80%94%E2%80%94%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>2020/11/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%E5%90%97%EF%BC%9F%E2%80%94%E2%80%94%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>这种代理方式需要代理对象和目标对象实现一样的接口。</li><li>为另一个对象提供一个<strong>替身</strong>或占位符以提供对这个对象的访问，使用代理模式创建对象，让代表模式创建代表对象，让代表对象控制某对象的访问，被代理对象可以是==远程的对象==、==创建开销大的对象==或需要==安全控制的对象==。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/blog_img/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%861.png" alt="1565770886584"> </p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>可以在不修改目标对象的前提下扩展目标对象的功能</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>当需要代理多个类的时候，由于代理对象要实现与目标对象一致的接口，有两种方式：<ul><li>只维护一个代理类，由这个代理类实现多个接口，但是这样就导致==代理类过于庞大==</li><li>新建多个代理类，每个目标对象对应一个代理类，但是这样会==产生过多的代理类==</li></ul></li><li>不易维护。一旦增加、删除接口方法，目标对象与代理对象都要进行修改。（接口中的默认方法除外）</li></ul><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/blog_img/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%862.png" alt="1565784573007">  </p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Proxy_static;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代理类和目标对象类都要实现的接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> Proxy_static;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目标对象类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> <span class="keyword">implements</span> <span class="title">IUserDao</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;保存数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;默认方法执行了！....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> Proxy_static;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoProxy</span> <span class="keyword">implements</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*private IUserDao target;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*public UserDaoProxy(IUserDao target)&#123;</span></span><br><span class="line"><span class="comment">        this.target=target;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IUserDao <span class="title">getUserDao</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserDao();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;事务的预处理!.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;事物的后处理!.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         Object o= getUserDao();</span><br><span class="line">         <span class="keyword">if</span>((o <span class="keyword">instanceof</span> UserDao))&#123;</span><br><span class="line">             before();</span><br><span class="line">             ((UserDao) o).save();</span><br><span class="line">             ((UserDao) o).method();</span><br><span class="line">             after();</span><br><span class="line">         &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">             System.out.println(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> Proxy_static;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProxy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStaticProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        UserDaoProxy proxy = <span class="keyword">new</span> UserDaoProxy();</span><br><span class="line">        proxy.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line">事务的预处理!.....</span><br><span class="line">保存数据</span><br><span class="line">默认方法执行了！....</span><br><span class="line">事物的后处理!.....</span><br></pre></td></tr></table></figure><hr><h2 id="JDK动态代理（实现接口的方式）"><a href="#JDK动态代理（实现接口的方式）" class="headerlink" title="JDK动态代理（实现接口的方式）"></a>JDK动态代理（实现接口的方式）</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><ul><li>动态代理利用了JDK API，动态地在内存中构建对象，从而实现对目标对象的代理功能。动态代理又被称为JDK代理或接口代理。</li><li>根据反射机制，Java 反射机制在程序<strong>运行时</strong>，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性。这种 <strong>动态的获取信息</strong> 以及 <strong>动态调用对象的方法</strong> 的功能称为 <strong>java 的反射机制</strong>。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/blog_img/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%861.png" alt="1565771215686">  </p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li>Proxy.newInstance(类加载器，代理对象要实现的接口字节码数组，如何代理)<ul><li>类加载器：它使用的和被代理对象是相同类加载器</li><li>代理对象要实现的接口：和被代理对象实现相同接口</li><li>如何代理：它就是增强方法，我们需要自己来提高<ul><li>此处是一个InvocationHandler的接口，我们需要写一个该接口的实现类，在实现类中调用需要增强的方法</li></ul></li></ul></li></ul><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>动态对象不需要实现接口，但是要求目标对象必须实现接口，否则不能使用动态代理。</li></ul><p>JDK生成代理对象主要涉及的类</p><ul><li><a href="http://tool.oschina.net/uploads/apidocs/jdk-zh/java/lang/reflect/Proxy.html">java.lang.reflect Proxy</a>，主要方法为</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Object    <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader,  //指定当前目标对象使用类加载器</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params"> Class&lt;?&gt;[] interfaces,    //目标对象实现的接口的类型</span></span></span><br><span class="line"><span class="function"><span class="params"> InvocationHandler h      //事件处理器</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> </span></span><br><span class="line"><span class="function"><span class="comment">//返回一个指定接口的代理类实例，该接口可以将方法调用指派到指定的调用处理程序。</span></span></span><br></pre></td></tr></table></figure><ul><li><a href="http://tool.oschina.net/uploads/apidocs/jdk-zh/java/lang/reflect/InvocationHandler.html">java.lang.reflect InvocationHandler</a>，主要方法为</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Object    <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> </span></span><br><span class="line"><span class="function"><span class="comment">// 在代理实例上处理方法调用并返回结果。</span></span></span><br></pre></td></tr></table></figure><h3 id="过程-1"><a href="#过程-1" class="headerlink" title="过程"></a>过程</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/blog_img/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%862.png" alt="1565785619044">  </p><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> proxy_dynamic;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目标对象类要实现的接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> proxy_dynamic;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目标对象类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;目标对象的方法执行了!....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> proxy_dynamic;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态代理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object proxied;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyHandler</span><span class="params">(Object proxied)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.proxied = proxied;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;事务的预处理！&quot;</span>);</span><br><span class="line">        <span class="comment">//使用真实对象来调用该方法</span></span><br><span class="line">        Object object = method.invoke(proxied,args);</span><br><span class="line">        System.out.println(<span class="string">&quot;事务的后处理！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> proxy_dynamic;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_proxy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建被代理的对象，Subject接口的实现类</span></span><br><span class="line">        Subject realSubject = <span class="keyword">new</span> RealSubject();</span><br><span class="line">        <span class="comment">//获取相应的ClassLoader</span></span><br><span class="line">        ClassLoader classLoader = realSubject.getClass().getClassLoader();</span><br><span class="line">        <span class="comment">//获取所有接口的Class，这里的RealSubject只实现了一个接口Subject</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = realSubject.getClass().getInterfaces();</span><br><span class="line">        <span class="comment">//创建一个传给代理类的调用请求处理器，处理所有代理对象上的方法调用</span></span><br><span class="line">        ProxyHandler proxyHandler = <span class="keyword">new</span> ProxyHandler(realSubject);</span><br><span class="line">        Subject proxy = (Subject)Proxy.newProxyInstance(classLoader, interfaces, proxyHandler);</span><br><span class="line">        <span class="comment">//调用代理方法</span></span><br><span class="line">        proxy.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">事务的预处理！</span><br><span class="line">目标对象的方法执行了!....</span><br><span class="line">事务的后处理！</span><br></pre></td></tr></table></figure><h3 id="静态代理和动态代理的区别"><a href="#静态代理和动态代理的区别" class="headerlink" title="静态代理和动态代理的区别"></a>静态代理和动态代理的区别</h3><ul><li>静态代理在编译时就已经实现了，编译完成后代理类是一个实际的Class文件</li><li>动态代理是运行时动态生成的，即编译完成后没有实际的Class文件，而是在运行时动态生成类的字节码，并加载JVM中。</li></ul><hr><h2 id="cglib动态代理（继承类的方式）"><a href="#cglib动态代理（继承类的方式）" class="headerlink" title="cglib动态代理（继承类的方式）"></a>cglib动态代理（继承类的方式）</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><ul><li>cglib(Code Generation Libary)是一个第三方代码生成类库，运行时在内存中动态生成一个子类对象从而实现对目标对象功能的拓展。</li><li>是一个基于ASM的字节码生成库，它允许我们在运行时对字节码进行修改和动态生成。CGLIB通过继承的方式实现代理，final方法是不能够被重写，所以它不能增强被final修饰的方法。</li><li>cglib代理实现有两个重要的成员，==Enhancer==、==MethodInterceptor==。<ul><li>Enhancer：来指定要代理的目标对象，实际处理代理逻辑的对象，最终通过调用create（）方法得到代理对象、对这个对象所有的非final方法的调用都会转发给MethodInterceptor</li><li>MethodInterceptor：动态代理对象的方法调用都会转发到intercept方法进行增强</li></ul></li></ul><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ul><li>使用cglib需要引入cglib的jar包，如果你已经有Spring-core的jar包，则无需引入，因为Spring中包含了cglib</li><li>cglib的Maven坐标</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="过程-2"><a href="#过程-2" class="headerlink" title="过程"></a>过程</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/blog_img/CGLIB%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.png" alt="1565786308644">  </p><h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> proxy_cglib;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目标对象类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;保存数据!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> proxy_cglib;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代理对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyFactory</span><span class="params">(Object target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//为目标对象生成代理对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxyInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//工具类，为实现类创建一个子类</span></span><br><span class="line">        Enhancer en = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">//设置父类</span></span><br><span class="line">        en.setSuperclass(target.getClass());</span><br><span class="line">        <span class="comment">//设置回调函数</span></span><br><span class="line">        en.setCallback(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//创建目标类的子类</span></span><br><span class="line">        <span class="keyword">return</span> en.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;事务的预处理！&quot;</span>);</span><br><span class="line">        <span class="comment">//执行目标对象的方法</span></span><br><span class="line">        Object returnValue = method.invoke(target,objects);</span><br><span class="line">        System.out.println(<span class="string">&quot;事务的后处理！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> proxy_cglib;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_cglib</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//目标对象</span></span><br><span class="line">        UserDao target = <span class="keyword">new</span> UserDao();</span><br><span class="line">        <span class="comment">//代理对象</span></span><br><span class="line">        UserDao proxy = (UserDao) <span class="keyword">new</span> ProxyFactory(target).getProxyInstance();</span><br><span class="line">        <span class="comment">//执行代理对象方法</span></span><br><span class="line">        proxy.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">事务的预处理！</span><br><span class="line">保存数据!</span><br><span class="line">事务的后处理！</span><br></pre></td></tr></table></figure><hr><h2 id="JDK动态代理和cglib动态代理对比"><a href="#JDK动态代理和cglib动态代理对比" class="headerlink" title="JDK动态代理和cglib动态代理对比"></a>JDK动态代理和cglib动态代理对比</h2><ul><li>JDK动态代理：基于Java反射机制实现，必须要实现了接口的业务类才能用这种办法生成代理对象</li><li>cglib动态代理：基于ASM机制实现，通过生成业务类的子类作为代理类</li></ul><h3 id="JDK-Proxy的优势"><a href="#JDK-Proxy的优势" class="headerlink" title="JDK Proxy的优势"></a>JDK Proxy的优势</h3><ul><li>最小化依赖关系，减少依赖意味着简化开发和维护，JDK本身的支持，可能比cglib更加更可靠</li><li>平滑进行JDK版本升级，而字节码类库通常需要进行更新以保证在新版Java上能够使用</li><li>代码实现简单</li></ul><h3 id="基于类似cglib框架的优势"><a href="#基于类似cglib框架的优势" class="headerlink" title="基于类似cglib框架的优势"></a>基于类似cglib框架的优势</h3><ul><li>无需实现接口，达到代理类无侵入</li><li>只操作我们关心的类，而不必为其他的相关类增加工作量</li><li>高性能</li></ul><h3 id="Spring-中的应用"><a href="#Spring-中的应用" class="headerlink" title="Spring 中的应用"></a>Spring 中的应用</h3><p>&emsp;&emsp;Spring在aop动态代理实际对象中的一些操作：</p><ol><li>如果实际对象有实现相关的接口，那么采用JDK动态代理的方式。</li><li>如果没有相关的接口，那么采用CGLIB的方式实现代理。</li></ol><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><strong>CGLib创建的动态代理对象性能比JDK创建的动态代理对象的性能高不少，但是CGLib在创建代理对象时所花费的时间却比JDK多得多，所以对于单例的对象，因为无需频繁创建对象，用CGLib合适，反之，使用JDK方式要更为合适一些。同时，由于CGLib由于是采用动态创建子类的方法，对于final方法，无法进行代理。</strong></li><li>静态代理实现比较简单，只要代理对象对目标对象对目标对象进行包装，即可实现增强功能，但静态代理只能为一个目标对象服务，如果目标对象过多，则会产生很多代理类。</li><li>JDK动态代理需要目标对象实现业务接口，代理类只需要实现InvocationHandler接口</li><li>静态代理在编译时产生class字节码文件，可以直接使用，效率高。</li><li>动态代理必须实现InvocationHandler接口，通过反射代理方法，比较消耗系统性能，但可以减少代理类的数量，使用更灵活。</li><li>cglib代理无需实现接口，通过生成类字节码实现代理，比反射稍快，不存在性能问题，但cglib会继承目标对象，需要重写方法，所以目标对象不能为final类</li></ul><hr><h3 id="描述代理的几种实现方式？分别说出相应的优缺点"><a href="#描述代理的几种实现方式？分别说出相应的优缺点" class="headerlink" title="描述代理的几种实现方式？分别说出相应的优缺点"></a>描述代理的几种实现方式？分别说出相应的优缺点</h3><ul><li>代理可分为“静态代理“和”动态代理“，动态代理又分为”JDK动态代理“和“cglib动态代理”实现</li><li>==静态代理==：代理对象和实际对象都继承了同一个接口，在代理对象中指向的是实际对象的实例，这样对外暴露是代理对象而真正调用的是Real Object<ul><li>优点：可以很好的保护实际对象的业务逻辑对外暴露，从而提高了安全性</li><li>缺点：不同的接口要有不同的代理类实现，会很冗余</li></ul></li><li>==JDK动态代理==：<ul><li>为了解决静态代理中，生成的大量代理类造成的冗余</li><li>JDK动态代理只需要实现InvocationHandler接口，重写invoke方法便可以完成代理的实现</li><li>JDK的代理是利用反射代理类Proxyxxx.class代理类字节码，并生成对象</li><li>JDK动态代理之所以只能代理接口，是因为代理类本身已经extends了Proxy，而Java是不允许多继承的，但是允许实现多个接口</li><li>优点：解决了静态代理中冗余的代理实现类的问题</li><li>缺点：JDK动态代理是基于接口设计实现的，如果没有接口，会抛异常</li></ul></li><li>==cglib动态代理==：<ul><li>由于JDK动态代理限制了只能基于接口设计，而对于没有接口的情况，JDK解决不了</li><li>cglib采用了非常底层的字节码技术，其原理是通过字节码技术为一个类创建子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑，来完成动态代理的实现</li><li>实现方式实现MethodInterceptor接口，重写Inceptor方法，通过Enhancer类的回调方法来实现<ul><li>回调方法：A调用B的方法，B调用A的方法C，方法C对于A来说就是一个回调方法</li></ul></li><li>但是cglib在创建代理对象时所花费的时间却比JDK多得多，所以对于单例的对象，因为无需频繁创建对象，用cglib合适，反之，使用JDK方式要合适一点</li><li>同时，由于cglib是采用动态创建子类的方法，对于final方法，无法进行代理</li><li>优点：没有接口也能实现动态代理，而且采用了字节码增强技术，性能也不错</li><li>缺点：技术实现相对于难理解</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 代理模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代理模式 </tag>
            
            <tag> 静态代理 </tag>
            
            <tag> 动态代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式有那么难吗？——观察者模式</title>
      <link href="2020/11/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%E5%90%97%EF%BC%9F%E2%80%94%E2%80%94%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>2020/11/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%E5%90%97%EF%BC%9F%E2%80%94%E2%80%94%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>&emsp;&emsp;最近在看消息中间件，里面提及到了发布订阅模式，使我联想到了之前学习过的观察者模式，于是对观察者模式又进行重温。同时写一篇博客，来记录一些对于观察者模式的理解。  </p><hr><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p><strong>观察者模式</strong>：定义了一种多对多的依赖关系，让多个观察者监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动的更新自身状态。</p></blockquote><p>&emsp;&emsp;下面给出观察者模式中的类图，其中主题、观察者都可以是一个抽象类，方便之后的扩展，同时也降低了观察者与某一主题的耦合性。<br><img src= "/img/loading.gif" data-lazy-src="https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/blog_img/%E8%A7%82%E5%AF%9F%E8%80%85%E7%B1%BB%E5%9B%BE.png">  </p><p>&emsp;&emsp;其中最主要的两个类，即==Subject类==和==Observer类==。  </p><p>&emsp;&emsp;Subject类，可翻译为主题或抽象通知者，一般用<strong>一个抽象类</strong>或者<strong>一个接口</strong>实现。它把所有对观察者对象的引用保存在一个聚集里，每个主题都可以有任何数量的观察者。抽象主题提供一个接口，可以增加和删除观察者对象。  </p><p>&emsp;&emsp;Observer类，抽象观察者，为所有的具体观察者定义一个接口，在得到主题的通知时更新自己。这个接口叫做更新接口。抽象观察者一般用一个抽象类或者一个接口实现。更新接口通常包含一个update（）方法，这个方法叫做更新方法，这个方法就是将来主题对象要调用的方法。  </p><hr><h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h3><blockquote><p>现有如下需求：学校管理员发出一个具体的通知，要求是通知到当前名单中的老师。</p></blockquote><p>&emsp;&emsp;从这个需求中，我们可以分析出，观察者就是老师这个对象，主题对象就是管理员，通知的内容则是更新老师的状态。  </p><ul><li>管理员类(Admin)，对应的就是主题对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Admin</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Teacher&gt; teachers;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Admin</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.teachers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTeacher</span><span class="params">(Teacher teacher)</span> </span>&#123;</span><br><span class="line">        teachers.add(teacher);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteTeacher</span><span class="params">(Teacher teacher)</span> </span>&#123;</span><br><span class="line">        teachers.remove(teacher);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyEveryone</span><span class="params">(String advice)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;%s 管理员 发出了公告，&#x27;%s&#x27;&quot;</span>, name, advice));</span><br><span class="line">        <span class="keyword">for</span> (Teacher teacher : teachers) &#123;</span><br><span class="line">            teacher.update(advice);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>教师类(Teacher)，对应的就是观察者对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String academy;</span><br><span class="line">    <span class="keyword">private</span> String major;</span><br><span class="line">    <span class="keyword">private</span> String advice;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(String name, String academy, String major)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.academy = academy;</span><br><span class="line">        <span class="keyword">this</span>.major = major;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String advice)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;%s 老师(%s, %s)，接收到了通知! 通知信息为: %s&quot;</span>, name, major, academy, advice));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Getter and Setter */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Teacher&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, academy=&#x27;&quot;</span> + academy + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, major=&#x27;&quot;</span> + major + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类(Test)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestObserver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Admin admin = <span class="keyword">new</span> Admin(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        Teacher teacher1 = <span class="keyword">new</span> Teacher(<span class="string">&quot;李四&quot;</span>, <span class="string">&quot;计算机学院&quot;</span>, <span class="string">&quot;计科专业&quot;</span>);</span><br><span class="line">        Teacher teacher2 = <span class="keyword">new</span> Teacher(<span class="string">&quot;王五&quot;</span>, <span class="string">&quot;电控学院&quot;</span>, <span class="string">&quot;自动化专业&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//老师订阅主题</span></span><br><span class="line">        admin.addTeacher(teacher1);</span><br><span class="line">        admin.addTeacher(teacher2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//管理员发出通知</span></span><br><span class="line">        admin.notifyEveryone(<span class="string">&quot;今天放假一天，不上课!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试结果</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">张三 管理员 发出了公告，<span class="string">&#x27;今天放假一天，不上课!&#x27;</span></span><br><span class="line">李四 老师(计科专业, 计算机学院)，接收到了通知! 通知信息为: 今天放假一天，不上课!</span><br><span class="line">王五 老师(自动化专业, 电控学院)，接收到了通知! 通知信息为: 今天放假一天，不上课!</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="观察者模式升级"><a href="#观察者模式升级" class="headerlink" title="观察者模式升级"></a>观察者模式升级</h3><p>&emsp;&emsp;上述的案例中，管理员类和教师类都是固定的，也就是说，管理员类太依赖于教师这个实体类，从而达不到解耦的效果。那么我们可以将教师类、管理员类抽象化。  </p><blockquote><p>需求升级：现在不仅管理员可以发出通知，校长也具备发出通知的功能，并且接收信息&gt; 的对象不再局限于教师，此时要给学生也要发出的信息。</p></blockquote><ul><li><p>抽象主题类(Subject)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Subject</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserve</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeOberve</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">notifyEveryOne</span><span class="params">(String message)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>抽象观察者类(Observer)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Observer</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String message)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>教师类(Teacher)，观察者类的具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String academy;</span><br><span class="line">    <span class="keyword">private</span> String major;</span><br><span class="line">    <span class="keyword">private</span> String advice;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(String name, String academy, String major)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.academy = academy;</span><br><span class="line">        <span class="keyword">this</span>.major = major;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String advice)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;%s 老师(%s, %s)，接收到了通知! 通知信息为: %s&quot;</span>, name, major, academy, advice));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Getter and Setter */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Teacher&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, academy=&#x27;&quot;</span> + academy + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, major=&#x27;&quot;</span> + major + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>学生类(Student)，观察者的具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String className;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, String className)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.className = className;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;%s 学生(%s) 接收到了通知! 通知信息为: %s&quot;</span>, name, className, message));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Getter and Setter */</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;className=&#x27;&quot;</span> + className + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>校长类(SchoolMaster)，主题类的一个具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchoolMaster</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SchoolMaster</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyEveryOne</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;%s 校长 发出了公告，&#x27;%s&#x27;&quot;</span>, name, message));</span><br><span class="line">        <span class="keyword">for</span> (Observer observer : observers) &#123;</span><br><span class="line">            observer.update(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>管理员类(Admin)，主题类的一个具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String academy;</span><br><span class="line">    <span class="keyword">private</span> String major;</span><br><span class="line">    <span class="keyword">private</span> String advice;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(String name, String academy, String major)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.academy = academy;</span><br><span class="line">        <span class="keyword">this</span>.major = major;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String advice)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;%s 老师(%s, %s)，接收到了通知! 通知信息为: %s&quot;</span>, name, major, academy, advice));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Getter and Setter */</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Teacher&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, academy=&#x27;&quot;</span> + academy + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, major=&#x27;&quot;</span> + major + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类(Test)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestObserver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Subject admin = <span class="keyword">new</span> Admin(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        Subject schoolMaster = <span class="keyword">new</span> SchoolMaster(<span class="string">&quot;Boss&quot;</span>);</span><br><span class="line">        Observer teacher1 = <span class="keyword">new</span> Teacher(<span class="string">&quot;李四&quot;</span>, <span class="string">&quot;计算机学院&quot;</span>, <span class="string">&quot;计科专业&quot;</span>);</span><br><span class="line">        Observer teacher2 = <span class="keyword">new</span> Teacher(<span class="string">&quot;王五&quot;</span>, <span class="string">&quot;电控学院&quot;</span>, <span class="string">&quot;自动化专业&quot;</span>);</span><br><span class="line">        Observer student = <span class="keyword">new</span> Student(<span class="string">&quot;小明&quot;</span>, <span class="string">&quot;计算机科学1801班&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//订阅管理员主题消息</span></span><br><span class="line">        admin.addObserve(teacher1);</span><br><span class="line">        admin.addObserve(teacher2);</span><br><span class="line">        admin.addObserve(student);</span><br><span class="line">        admin.notifyEveryOne(<span class="string">&quot;今天不上课，休假一天!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//订阅校长主题消息</span></span><br><span class="line">        schoolMaster.addObserve(teacher1);</span><br><span class="line">        schoolMaster.addObserve(student);</span><br><span class="line">        schoolMaster.notifyEveryOne(<span class="string">&quot;今天不放假，不要传播谣言!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试结果</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">张三 管理员 发出了公告，<span class="string">&#x27;今天不上课，休假一天!&#x27;</span></span><br><span class="line">李四 老师(计科专业, 计算机学院)，接收到了通知! 通知信息为: 今天不上课，休假一天!</span><br><span class="line">王五 老师(自动化专业, 电控学院)，接收到了通知! 通知信息为: 今天不上课，休假一天!</span><br><span class="line">小明 学生(计算机科学<span class="number">1801</span>班) 接收到了通知! 通知信息为: 今天不上课，休假一天!</span><br><span class="line">Boss 校长 发出了公告，<span class="string">&#x27;今天不放假，不要传播谣言!&#x27;</span></span><br><span class="line">李四 老师(计科专业, 计算机学院)，接收到了通知! 通知信息为: 今天不放假，不要传播谣言!</span><br><span class="line">小明 学生(计算机科学<span class="number">1801</span>班) 接收到了通知! 通知信息为: 今天不放假，不要传播谣言!</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>&emsp;&emsp;观察者模式是一个发布/订阅的模式，比较经典，也是实际场景中运用比较多的一个模式，在Java中有相应的类可以实现，但是这几个类在Java9中已经废弃。原因是因为没有实现序列化接口。设计模式的运用可以极大将开发变得更加灵活，是代码的扩展性增强。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 设计者模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 观察者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AQS(Abstract-Queued-Synchronizer)原理剖析</title>
      <link href="2020/11/27/AQS-Abstract-Queued-Synchronizer-%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/"/>
      <url>2020/11/27/AQS-Abstract-Queued-Synchronizer-%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="AQS概述"><a href="#AQS概述" class="headerlink" title="AQS概述"></a>AQS概述</h2><p>&emsp;&emsp;内部使用 volatile 和 CAS 来实现，同步队列使用双向链表，等待队列使用单向队列。</p><ul><li>volatile关键字，保证最新的state可以被其他线程读取到</li><li>CAS保证节点更新（入队操作）</li></ul><p>&emsp;&emsp;适用范围十分广泛，ReentrantLock、Semaphore、CountDownLatch、CyclicBarrier…</p><hr><h2 id="ReentrantLock与Synchronized对比"><a href="#ReentrantLock与Synchronized对比" class="headerlink" title="ReentrantLock与Synchronized对比"></a>ReentrantLock与Synchronized对比</h2><table><thead><tr><th></th><th>RenntrantLock</th><th>Synchronized</th></tr></thead><tbody><tr><td>加锁方式</td><td>手动获取、释放锁</td><td>自动释放锁，由monitorEnter和monitorExit实现</td></tr><tr><td>队列</td><td>同步队列，双向链表<br/>等待队列，单向链表</td><td>等待队列、同步队列</td></tr><tr><td>公平性</td><td>支持公平锁与非公平锁</td><td>无法控制</td></tr><tr><td>支持信号量</td><td>支持，由Condition来实现，await()/signal()</td><td>不支持，只能获取采取多个监视器来实现</td></tr><tr><td>性能对比</td><td>在并发量比较大时，性能优越</td><td>并发数量较小时，性能优越（偏向锁、偏向锁、重度锁）</td></tr></tbody></table><hr><h2 id="同步队列示意图"><a href="#同步队列示意图" class="headerlink" title="同步队列示意图"></a>同步队列示意图</h2><p>&emsp;&emsp;同步队列，是一个双向链表，<strong>head节点</strong>没有任何实际意义，每一个节点在入队的之后需要判断前驱节点是否为头结点，如果是头结点则尝试获取锁。<strong>tail节点</strong>指链表的尾部节点，每次入队的时候需要通过CAS操作来入队。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/AQS-%E5%90%8C%E6%AD%A5%E9%98%9F%E5%88%97.png"></p><h2 id="lock加锁实现"><a href="#lock加锁实现" class="headerlink" title="lock加锁实现"></a>lock加锁实现</h2><p>&emsp;&emsp;分为公平锁和非公平锁：</p><ul><li><strong>公平锁</strong>：指的是必须按照线程访问顺序来进行获取锁</li><li><strong>非公平锁</strong>：指的是可以不按照线程的访问顺序来获取锁，比如一个锁被释放了，此时会通知同步队列中的线程，如果此时另一个新的线程也来获取锁，那么这个锁可能被这个新的线程获取，之前的“老”线程会进入继续等待锁状态。</li></ul><h3 id="公平锁加锁流程"><a href="#公平锁加锁流程" class="headerlink" title="公平锁加锁流程"></a>公平锁加锁流程</h3><ol><li>首先尝试获取锁 <code>tryAcquire()</code> ，首先获取当前状态state，如果state为0，说明当前没有线程持有锁，那么<strong>判断同步队列中是否含有节点</strong> <code>hasQueuedPredecessors()</code>，实现公平锁关键之处。如果没有节点，利用CAS操作设置state状态变量，并且当前独占访问线程为currThread（实现可重入锁的关键）。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line"><span class="keyword">int</span> c = getState();</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//1. 判断同步队列中是否含有其他线程，如果含有直接将该线程添加到队尾</span></span><br><span class="line">        <span class="comment">//2. 利用CAS操作更新状态变量</span></span><br><span class="line">        <span class="comment">//3. 设置线程独占模式</span></span><br><span class="line">    <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class="line">    compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">    setExclusiveOwnerThread(current);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">        <span class="comment">//如果当前线程是线程独占访问的那个线程。则直接加上本次acquires，实现可重入锁</span></span><br><span class="line">    <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">    <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">    setState(nextc);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>第一次尝试获取公平锁失败时候，添加该节点到队尾，并且设置相关的状态（以独占模式来等待）。利用CAS添加该节点到队尾中。其中 <code>enq()</code> 确保尾节点已经被初始化，并且将该节点该节点添加到队尾中，最后返回该节点。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">addWaiter</span><span class="params">(Node mode)</span> </span>&#123;</span><br><span class="line">Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode);</span><br><span class="line"><span class="comment">// Try the fast path of enq; backup to full enq on failure</span></span><br><span class="line">Node pred = tail;</span><br><span class="line"><span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123;</span><br><span class="line">node.prev = pred;</span><br><span class="line"><span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">pred.next = node;</span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">enq(node);</span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">Node t = tail;</span><br><span class="line"><span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123; <span class="comment">// Must initialize</span></span><br><span class="line"><span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> Node()))</span><br><span class="line">tail = head;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">node.prev = t;</span><br><span class="line"><span class="keyword">if</span> (compareAndSetTail(t, node)) &#123;</span><br><span class="line">t.next = node;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>确保节点已经添加到同步队列尾部之后，将线程挂起，以及线程被最后唤醒都在以下的方法中。<code>shouldParkAfterFailedAcquire()</code> 根据前一个节点来的状态来设置当前节点状态。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line"><span class="keyword">final</span> Node p = node.predecessor();</span><br><span class="line"><span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">                <span class="comment">// 确认前驱节点是否是头结点，如果是头结点则尝试获取锁</span></span><br><span class="line">                <span class="comment">// 如果获取成功那么设置当前头结点为当前节点，并且将前驱节点的next节点置null</span></span><br><span class="line">setHead(node);</span><br><span class="line">p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">failed = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">return</span> interrupted;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">parkAndCheckInterrupt())</span><br><span class="line">                <span class="comment">//挂起当前线程，判断当前线程的中断状态</span></span><br><span class="line">interrupted = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (failed)</span><br><span class="line">            cancelAcquire(node);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">shouldParkAfterFailedAcquire</span><span class="params">(Node pred, Node node)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ws = pred.waitStatus;</span><br><span class="line"><span class="keyword">if</span> (ws == Node.SIGNAL)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 如果前一个节点状态为SIGNAL，也就是释放节点时需要通知下一个节点，那么直接返回true</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span> (ws &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">* 如果前一个节点已经不可用，状态大于 &gt; 0，根据双向链表的特点找到前面状态 &lt; 0 的前驱节点</span></span><br><span class="line"><span class="comment">* 并且设置前驱节点的next节点为该节点</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            node.prev = pred = pred.prev;</span><br><span class="line">        &#125; <span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>);</span><br><span class="line">        pred.next = node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 设置前驱节点的状态为 SIGNAL，释放节点时需要通知下一个节点</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非公平锁加锁过程"><a href="#非公平锁加锁过程" class="headerlink" title="非公平锁加锁过程"></a>非公平锁加锁过程</h3><p>&emsp;&emsp;与公平锁在细节上类似，在加锁时候不需要判断此时同步队列中是否含有节点，首先利用CAS操作设置state状态变量。</p><ol><li>第一次尝试获取锁，不需要判断此时同步队列是否含有节点，如果获取成功，设置线程独占模式，否则进入 <code>acquire()</code> 方法，与上述过程一致。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">acquire(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="释放锁过程"><a href="#释放锁过程" class="headerlink" title="释放锁过程"></a>释放锁过程</h3><p>&emsp;&emsp;公平锁与非公平锁只是在获取锁上不一致，释放锁的时候行为都是一样的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">sync.release(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>释放锁，更新state状态变量，判断当前的头结点状态变量如果不等于0，那么需要唤醒被挂起的线程。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tryRelease(arg)) &#123;</span><br><span class="line">Node h = head;</span><br><span class="line"><span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</span><br><span class="line">            <span class="comment">//如果当前头结点不为 null，并且状态变量不等于，说明需要唤醒被挂起的线程（根据当前状态变量）</span></span><br><span class="line">unparkSuccessor(h);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>根据当前的状态变量的值，采取相应的唤醒动作。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unparkSuccessor</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 首先更新当前节点状态变量为 0</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">int</span> ws = node.waitStatus;</span><br><span class="line">    <span class="keyword">if</span> (ws &lt; <span class="number">0</span>)</span><br><span class="line">compareAndSetWaitStatus(node, ws, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 取出后继节点，并判断后继节点状态变量，如果大于 0，说明后继节点已不可用</span></span><br><span class="line"><span class="comment">    * 如果后继节点已不可用，那么从同步队列的尾部开始取出队列中，第一个节点状态变量小于 0 的节点</span></span><br><span class="line"><span class="comment">    * 最后唤醒该节点中的线程</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Node s = node.next;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.waitStatus &gt; <span class="number">0</span>) &#123;</span><br><span class="line">s = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (Node t = tail; t != <span class="keyword">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class="line"><span class="keyword">if</span> (t.waitStatus &lt;= <span class="number">0</span>)</span><br><span class="line">s = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (s != <span class="keyword">null</span>)</span><br><span class="line">LockSupport.unpark(s.thread);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 并发篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发编程 </tag>
            
            <tag> AQS </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LR分析——SLR(1)分析器</title>
      <link href="2020/11/27/LR%E5%88%86%E6%9E%90%E2%80%94%E2%80%94SLR-1-%E5%88%86%E6%9E%90%E5%99%A8/"/>
      <url>2020/11/27/LR%E5%88%86%E6%9E%90%E2%80%94%E2%80%94SLR-1-%E5%88%86%E6%9E%90%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="SLR-1-分析"><a href="#SLR-1-分析" class="headerlink" title="SLR(1) 分析"></a>SLR(1) 分析</h2><p>&emsp;&emsp;SLR(1) 文法，其思想是基于容许 LR(0) 规范族中有冲突的项目集（状态），用向前查看一个符号的办法来进行处理，以解决冲突。</p><h4 id="SLR-1-限定要求"><a href="#SLR-1-限定要求" class="headerlink" title="SLR(1) 限定要求"></a>SLR(1) 限定要求</h4><p>&emsp;&emsp;假定一个 LR(0) 规范族中含有如下的项目集（状态）I：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I = &#123;X-&gt;α·bβ, A-&gt;γ·, B-&gt;δ·&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;也就是在该项目集中含有移进-归约冲突和归约-归约冲突。其中 α、β、γ、δ 为文法符号串，b 为终结符。那么只要在所有含有 A 或 B 的句型中，直接跟在 A 或 B 后的可能终结符的集合即 FOLLOW(A) 和 FOLLOW(B) 互不相交，且都不包含 b，也就是只要满足：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">FOLLOW</span><span class="params">(A)</span></span>∩FOLLOW(B)=∅</span><br><span class="line"><span class="function"><span class="title">FOLLOW</span><span class="params">(A)</span></span>∩&#123;b&#125;=∅</span><br><span class="line"><span class="function"><span class="title">FOLLOW</span><span class="params">(B)</span></span>∩&#123;b&#125;=∅</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;那么，当在状态 I 时，如果面临某输入符号为 a，则动作可按以下规定决策：</p><ol><li>若 a = b，则移进。</li><li>若 a∈FOLLOW(A)，则用产生式 A-&gt;γ 进行归约。</li><li>若 a∈FOLLOW(B)，则用产生式 B-&gt;δ 进行归约。</li><li>此外，报错。</li></ol><p>&emsp;&emsp;通常 LR(0) 规范族的一个项目集 I 中可能含有多个移进项目和多个归约项目，可假设项目集 I（状态）中有 m 个移进项目：A<del>1</del>-&gt;α<del>1</del>·a<del>1</del>β<del>1</del>，A<del>2</del>-&gt;α<del>2</del>·a<del>2</del>β<del>2</del>，…，A<del>m</del>-&gt;α<del>m</del>·a<del>m</del>β<del>m</del>；同时含有 n 个归约项目：B<del>1</del>-&gt;γ<del>1</del>·，B<del>2</del>-&gt;γ<del>2</del>·，B<del>n</del>-&gt;γ<del>n</del>·，只要集合 {a<del>1</del>, a<del>2</del>, …, a<del>m</del>} 和 FOLLOW(B<del>1</del>)，FOLOOW(B<del>2</del>)，…，FOLLOW(B<del>n</del>) 两两交集都为空，那么仍可用上述规则解决冲突，即考查当前输入符号以决定动作。</p><ol><li>若 a∈{a<del>1</del>, a<del>2</del>, …, a<del>m</del>}，则移进。</li><li>若 a∈FOLLOW(B<del>i</del>)，i = 1, 2, …, n，则用 B<del>i</del>-&gt;γ<del>i</del> 进行归约。</li><li>此外，报错。</li></ol><h4 id="改进的-SLR-1-分析表的构造方法"><a href="#改进的-SLR-1-分析表的构造方法" class="headerlink" title="改进的 SLR(1) 分析表的构造方法"></a>改进的 SLR(1) 分析表的构造方法</h4><p>&emsp;&emsp;假设已构造出文法的 LR(0) 项目集规范族和计算出所有非终结符的 FOLLOW 集合。</p><p>&emsp;&emsp;项目集规范族为 <code>C=&#123;I0, I1, ..., In&#125;</code>，其中 <code>Ik</code> 为项目集的名字，k 为状态名，令包含 S’-&gt;·S 项目的集合 <code>Ik</code> 的下标 k 为分析器的初始状态，求出所有非终结符的 FOLLOW 集。</p><p>&emsp;&emsp;改进的 SLR(1) 分析表的动作（ACTION）表和状态转换（GOTO）表的构造步骤如下：</p><ol><li>若项目 A-&gt;α·aβ 属于 <code>Ik</code>，且转换函数 <code>GO(Ik, a) = Ij</code>，当 a 为终结符时，则置 ACTION[k, a] 为 Sj</li><li>若项目 A-&gt;α· 属于 <code>Ik</code>，则对 a 任何终结符或者#，且满足 a∈FOLLOW(A) 时，置 ACTION[k, a] = rj，j 为产生式 A-&gt;α 在文法 G‘ 中的编号。</li><li>若 <code>GO(Ik, A) = Ij</code>，则置 GOTO[k, A] = j，其中 A 为非终结符，j 为某一状态号。</li><li>若项目 S’-&gt;S· 属于 <code>Ik</code>，则置 ACTION[k, #] = acc，表示接受。</li><li>凡不能用上述方法填入的分析表的元素，均应填上报错标志。</li></ol><h4 id="SLR-1-分析器"><a href="#SLR-1-分析器" class="headerlink" title="SLR(1) 分析器"></a>SLR(1) 分析器</h4><p>&emsp;&emsp;如果对于一个文法的 LR(0) 项目集规范族的某些项目集或 LR(0) 分析表中所含有的动作冲突都能用上述方法解决，则称这个文法是 SLR(1) 文法，所构造的分析表为 SLR(1) 分析表，使用 SLR(1) 分析表的分析器称为 SLR(1) 分析器。</p><h4 id="SLR-1-例子"><a href="#SLR-1-例子" class="headerlink" title="SLR(1) 例子"></a>SLR(1) 例子</h4><p>&emsp;&emsp;文法的定义如下：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.</span> S&#x27;-&gt;E</span><br><span class="line"><span class="number">1.</span> E-&gt;E+T</span><br><span class="line"><span class="number">2.</span> E-&gt;T</span><br><span class="line"><span class="number">3.</span> T-&gt;T*F</span><br><span class="line"><span class="number">4.</span> T-&gt;F</span><br><span class="line"><span class="number">5.</span> F-&gt;(E)</span><br><span class="line"><span class="number">6.</span> F-&gt;i</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;该文法的项目有：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> S&#x27;-&gt;·E<span class="number">11.</span> T-&gt;T*·F</span><br><span class="line"><span class="number">2.</span> S&#x27;-&gt;E·<span class="number">12.</span> T-&gt;T*F·</span><br><span class="line"><span class="number">3.</span> E-&gt;·E+T<span class="number">13.</span> T-&gt;·F</span><br><span class="line"><span class="number">4.</span> E-&gt;E·+T<span class="number">14.</span> T-&gt;F·</span><br><span class="line"><span class="number">5.</span> E-&gt;E+·T<span class="number">15.</span> F-&gt;·(E)</span><br><span class="line"><span class="number">6.</span> E-&gt;E+T·<span class="number">16.</span> F-&gt;(·E)</span><br><span class="line"><span class="number">7.</span> E-&gt;·T<span class="number">17.</span> F-&gt;(E·)</span><br><span class="line"><span class="number">8.</span> E-&gt;T·<span class="number">18.</span> F-&gt;(E)·</span><br><span class="line"><span class="number">9.</span> T-&gt;·T*F<span class="number">19.</span> F-&gt;·i</span><br><span class="line"><span class="number">10.</span> T-&gt;T·*F <span class="number">20.</span> F-&gt;i·</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;求闭包算法：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">初始状态 I0:S&#x27;-&gt;·E  E-&gt;·E+T  E-&gt;·T  T-&gt;·T*F  T-&gt;·F  F-&gt;·(E)  F-&gt;·i</span><br><span class="line">I1 =GO(I0, E)=CLOSURE(S&#x27;-&gt;E·, E-&gt;E·+T)</span><br><span class="line"> =&#123;S&#x27;-&gt;E·, E-&gt;E·+T&#125;</span><br><span class="line">I2 =GO(I0, T)=CLOSURE(E-&gt;T·, T-&gt;T·*F)</span><br><span class="line"> =&#123;E-&gt;T·, T-&gt;T·*F&#125;</span><br><span class="line">I3 =GO(I0, F)=CLOSURE(T-&gt;F·)</span><br><span class="line"> =&#123;T-&gt;F·&#125;</span><br><span class="line">I4 =GO(I0, ()=CLOSURE(F-&gt;(·E))</span><br><span class="line"> =&#123;F-&gt;(·E), E-&gt;·E+T, E-&gt;·T, T-&gt;·T*F, T-&gt;·F, F-&gt;·(E), F-&gt;·i&#125;</span><br><span class="line">I5 =GO(I0, i)=CLOSURE(F-&gt;i·)</span><br><span class="line"> =&#123;F-&gt;i·&#125;</span><br><span class="line">I6 =GO(I1, +)=CLOSURE(E-&gt;E+·T)</span><br><span class="line"> =&#123;E-&gt;E+·T, T-&gt;·T*F, T-&gt;·F, F-&gt;·(E), F-&gt;·i&#125;</span><br><span class="line">I7 =GO(I2, *)=CLOSURE(T-&gt;T*·F)</span><br><span class="line"> =&#123;T-&gt;T*·F, F-&gt;·(E), F-&gt;·i&#125;;</span><br><span class="line">I8 =GO(I4, E)=CLOSURE(F-&gt;(E·), E-&gt;E·+T)</span><br><span class="line"> =&#123;F-&gt;(E·), E-&gt;E·+T&#125;</span><br><span class="line">    GO(I4, T)=CLOSURE(E-&gt;T·, T-&gt;T·*F)=I2# 前面已经求过闭包，不产生新状态，状态直接转换</span><br><span class="line">    GO(I4, F)=CLOSURE(T-&gt;F·)=I3# 前面已经求过闭包，不产生新状态，状态直接转换</span><br><span class="line">    GO(I4, ()=CLOSURE(F-&gt;(·E))=I4# 前面已经求过闭包，不产生新状态，状态直接转换</span><br><span class="line">    GO(I4, i)=CLOSURE(F-&gt;i·)=I5# 前面已经求过闭包，不产生新状态，状态直接转换</span><br><span class="line">I9 =GO(I6, T)=CLOSURE(E-&gt;E+T·, T-&gt;T·*F)</span><br><span class="line">     =&#123;E-&gt;E+T·, T-&gt;T·*F&#125;</span><br><span class="line">    GO(I6, F)=CLOSURE(T-&gt;F·)=I3# 前面已经求过闭包，不产生新状态，状态直接转换</span><br><span class="line">    GO(I6, ()=CLOSURE(F-&gt;(·E))=I4# 前面已经求过闭包，不产生新状态，状态直接转换</span><br><span class="line">    GO(I6, i)=CLOSURE(F-&gt;i·)=I5# 前面已经求过闭包，不产生新状态，状态直接转换</span><br><span class="line">I10=GO(I7, F)=CLOSURE(T-&gt;T*F·)</span><br><span class="line">     =&#123;T-&gt;T*F·&#125;</span><br><span class="line">    GO(I7, ()=CLOSURE(F-&gt;(·E))=I4# 前面已经求过闭包，不产生新状态，状态直接转换</span><br><span class="line">    GO(I7, i)=CLOSURE(F-&gt;i·)=I5# 前面已经求过闭包，不产生新状态，状态直接转换</span><br><span class="line">I11=GO(I8, ))=CLOSURE(F-&gt;(E)·)</span><br><span class="line">     =&#123;F-&gt;(E)·&#125;</span><br><span class="line">    GO(I8, +)=CLOSURE(E-&gt;E+·T)=I6# 前面已经求过闭包，不产生新状态，状态直接转换</span><br><span class="line">    Go(I9, *)=CLOSURE(T-&gt;T*·F)=I7# 前面已经求过闭包，不产生新状态，状态直接转换</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;识别活前缀的DFA，如下图所示：</p><p><img src= "/img/loading.gif" data-lazy-src="https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/blog_img/SLR%281%29%E5%88%86%E6%9E%90%E5%99%A8.png" alt="image-20200514141309736"></p><p>&emsp;&emsp;在 <code>I1、I2、I9</code> 中存在移进-归约冲突，因而这个表达式文法不是 LR(0) 文法，也就不能构造 LR(0) 分析表，现在分析 SLR(1) 方法是否可以解决冲突。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">在 I1 中：S&#x27;-&gt;E·  E-&gt;E·+T</span><br><span class="line">由于 FOLLOW(S&#x27;)=&#123;#&#125;，而 S&#x27;-&gt;E· 是唯一的接受项目，所以当且仅当遇到句子的结束符 # 时才被接受。</span><br><span class="line">又因 &#123;#&#125;∩&#123;+&#125;=∅，因此 I1 中的冲突可解决。</span><br><span class="line">--------------------------------------------------------</span><br><span class="line">在 I2 中：E-&gt;T·  T-&gt;T·<span class="strong">*F</span></span><br><span class="line"><span class="strong">计算得出 FOLLOW(E)=&#123;#, +, )&#125;</span></span><br><span class="line"><span class="strong">这样 FOLLOW(E)∩&#123;*</span>&#125;=∅ </span><br><span class="line">因此当面临输入符为+、）或#时，则用产生式 E-&gt;T 进行规约；</span><br><span class="line">当面临输入符为 * 时，则移进；</span><br><span class="line">其他情况则报错</span><br><span class="line">--------------------------------------------------------</span><br><span class="line">在 I3 中：E-&gt;E+T·  T-&gt;T·<span class="strong">*F</span></span><br><span class="line"><span class="strong">计算得出 FOLLOW(E)=&#123;#, +, )&#125;</span></span><br><span class="line"><span class="strong">这样 FOLLOW(E)∩&#123;*</span>&#125;=∅</span><br><span class="line">因此当面临输入符为<span class="code">+、）或#时，则用产生式 E-&gt;E+</span>T· 进行归约；</span><br><span class="line">当面临输入符为 * 时，则移进；</span><br><span class="line">其他情况则报错</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;SLR(1) 分析表，如下所示：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">i</span>+*()#ETF</span><br><span class="line"><span class="attribute">0</span>S<span class="number">5</span>S<span class="number">4</span><span class="number">1</span><span class="number">2</span><span class="number">3</span></span><br><span class="line"><span class="attribute">1</span>S<span class="number">6</span>acc</span><br><span class="line"><span class="attribute">2</span>r<span class="number">2</span>S<span class="number">7</span>r<span class="number">2</span>r<span class="number">2</span></span><br><span class="line"><span class="attribute">3</span>r<span class="number">4</span>r<span class="number">4</span>r<span class="number">4</span>r<span class="number">4</span></span><br><span class="line"><span class="attribute">4</span>S<span class="number">5</span>S<span class="number">4</span><span class="number">8</span><span class="number">2</span><span class="number">3</span></span><br><span class="line"><span class="attribute">5</span>r<span class="number">6</span>r<span class="number">6</span>r<span class="number">6</span>r<span class="number">6</span></span><br><span class="line"><span class="attribute">6</span>S<span class="number">5</span>S<span class="number">4</span><span class="number">9</span><span class="number">3</span></span><br><span class="line"><span class="attribute">7</span>S<span class="number">5</span>S<span class="number">4</span><span class="number">10</span></span><br><span class="line"><span class="attribute">8</span>S<span class="number">6</span>S<span class="number">11</span></span><br><span class="line"><span class="attribute">9</span>r<span class="number">1</span>S<span class="number">7</span>r<span class="number">1</span>r<span class="number">1</span></span><br><span class="line"><span class="attribute">10</span>r<span class="number">3</span>r<span class="number">3</span>r<span class="number">3</span>r<span class="number">3</span></span><br><span class="line"><span class="attribute">11</span>r<span class="number">5</span>r<span class="number">5</span>r<span class="number">5</span>r<span class="number">5</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;对输入串 i+i*i # 的 SLR(1) 分析过程：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">步骤状态栈符号栈输入串ACTIONGOTO</span><br><span class="line"><span class="number">1</span> <span class="number">0</span>   # i+i*i#   S5</span><br><span class="line"><span class="number">2</span> <span class="number">05</span>   #i +i*i#   r6   <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">03</span>   #F +i*i#   r4   <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">02</span>   #T +i*i#   r2   <span class="number">1</span></span><br><span class="line"><span class="number">5</span> <span class="number">01</span>   #E +i*i#   S6</span><br><span class="line"><span class="number">6</span> <span class="number">016</span>   #E+ i*i#   S5</span><br><span class="line"><span class="number">7</span>        <span class="number">0165</span>      #E+i      *i#   r6   <span class="number">3</span></span><br><span class="line"><span class="number">8</span> <span class="number">0163</span>   #E+F *i#   r4   <span class="number">9</span></span><br><span class="line"><span class="number">9</span>        <span class="number">0169</span>   #E+T *i#   S7</span><br><span class="line"><span class="number">10</span> <span class="number">01697</span>   #E+T* i#   S5</span><br><span class="line"><span class="number">11</span> <span class="number">016975</span>   #E+T*i #   r6   <span class="number">10</span></span><br><span class="line"><span class="number">12</span> <span class="number">01697</span>(<span class="number">10</span>) #E+T*F #   r3   <span class="number">9</span></span><br><span class="line"><span class="number">13</span> <span class="number">0169</span>   #E+T #   r1   <span class="number">1</span></span><br><span class="line"><span class="number">14</span> <span class="number">01</span>   #E #   acc</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
          <category> LR分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LR分析 </tag>
            
            <tag> SLR(1) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LR分析——LR(1)分析器</title>
      <link href="2020/11/27/LR%E5%88%86%E6%9E%90%E2%80%94%E2%80%94LR-1-%E5%88%86%E6%9E%90%E5%99%A8/"/>
      <url>2020/11/27/LR%E5%88%86%E6%9E%90%E2%80%94%E2%80%94LR-1-%E5%88%86%E6%9E%90%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="LR-1-分析"><a href="#LR-1-分析" class="headerlink" title="LR(1) 分析"></a>LR(1) 分析</h2><p>&emsp;&emsp;由于 SLR(1) 方法解决动作冲突时，对于归约项目 A-&gt;α·，只要当前面临输入符 a∈FOLLOW(A) 时，就确定采用产生式 A-&gt;α 进行归约，但是如果栈里的符号串为 βα，归约后变为 βA，在移进当前符 a，则栈里变为 βAa，而实际上 βAa 未必为文法规范句型的活前缀。</p><h4 id="LR-1-项目集族的构造"><a href="#LR-1-项目集族的构造" class="headerlink" title="LR(1) 项目集族的构造"></a>LR(1) 项目集族的构造</h4><p>&emsp;&emsp;以 S’-&gt;·S，# 属于初始项目集中，把 # 作为向前搜索符，表示活前缀为 γ（若 γ 是有关 S 产生式的某一右部）要归约成 S 时，必须面临输入符为 # 才行。对初始项目 S’-&gt;·S，# 求闭包后，再用转换函数逐步求出整个文法 LR(1) 项目集族。具体构造步骤如下：</p><ol><li>构造 LR(1) 项目集的闭包函数。<ol><li>假定 <code>I</code> 是一个项目集，<code>I</code> 的任何项目都属于 <code>CLOSURE(I)</code></li><li>若有项目 A-&gt;α·Bβ，a 属于 <code>CLOSURE(I)</code>，B -&gt; γ 是文法中的产生式，β∈V^*^，b∈FIRST(βα)，则 B-&gt;·γ，b 也属于 <code>CLOSURE(I)</code></li><li>重复2，直到 <code>CLOSURE(I)</code> 不再增大为止。</li></ol></li><li>构造转换函数</li></ol><p>&emsp;&emsp;LR(1) 转换函数的构造与 LR(0) 的相似：<code>GO(I, X) = CLOSURE(J)</code><br>&emsp;&emsp;其中 <code>I</code> 是 LR(1) 的项目集，X 是文法符号，<code>J = &#123;任何形如[A-&gt;αX·β, a]的项目 | [A-&gt;α·Xβ, a]∈I&#125;</code></p><p>&emsp;&emsp;对文法 G’ 的 LR(1) 项目集族的构造仍以 [S’-&gt;·S, #] 为初态集的初始项目，然后对其求闭包和转换函数，直到项目不再增大为止。</p><p>&emsp;&emsp;也就是对状态 <code>I</code> 经过符号 X 后转向状态 J，求出 J 的核后，对核求闭包即为 <code>CLOSURE(J)</code>。</p><h4 id="LR-1-分析表的构造"><a href="#LR-1-分析表的构造" class="headerlink" title="LR(1) 分析表的构造"></a>LR(1) 分析表的构造</h4><p>&emsp;&emsp;由于一个 LR(1) 项目可以看成由两个部分组成，一部分和 LR(0) 项目相同，称为心，另一部分向前搜索符集合，因而 LR(1) 分析表的构造与 LR(0) 分析表的构造在形式上基本相同，只是归约项目的归约动作取决于该归约项目的向前搜索符集，即只有当面临的输入符属于向前搜索符的集合，才做归约动作，其他情况均出错。具体构造过程如下：</p><p>&emsp;&emsp;若已构造出某文法的 LR(1) 的项目集族 C：<code>C = &#123;I0, I1, ..., In&#125;</code><br>&emsp;&emsp;其中 <code>Ik</code> 的 k 为分析器的状态，则动作（ACTION）表和状态转换（GOTO）表构造方法如下：</p><ol><li>若项目 [A-&gt;α·aβ, b] 属于 <code>Ik</code>，且 <code>GO(Ik, a) = Ij</code>，其中 a∈V<del>T</del>，则置 ACTION[k, a] = Sj。Sj 的含义是把输入符号 a 和状态 j 分别移入文法符号栈和状态栈。</li><li>若项目 [A-&gt;α·, a] 属于 <code>Ik</code>，则置 ACTION[k, a] = rj。其中 a∈V<del>T</del>，rj 的含义表示把当前栈顶符号串 α 归约为 A（即用产生式 A-&gt;α 归约），j 为文法中产生式 A-&gt;α 的编号。</li><li>若项目 [S’-&gt;S·, #] 属于 <code>Ik</code>，则置 ACTION[k, #] = acc，表示 “接受”。</li><li>若 <code>GO[Ik, A] = Ij</code>，其中 A∈V<del>N</del>，则置 GOTO[k, A] = j，表示转入 j 状态，置当前文法符号栈顶为 A，状态栈顶为 j。</li><li>反不能用规则 1~4 填入分析表中的元素，均置报错标志。</li></ol><h4 id="LR-1-例子"><a href="#LR-1-例子" class="headerlink" title="LR(1) 例子"></a>LR(1) 例子</h4><p>&emsp;&emsp;文法的定义如下：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.</span> S&#x27;-&gt;S</span><br><span class="line"><span class="number">1.</span> S-&gt;aAd</span><br><span class="line"><span class="number">2.</span> S-&gt;bAc</span><br><span class="line"><span class="number">3.</span> S-&gt;aec</span><br><span class="line"><span class="number">4.</span> S-&gt;bed</span><br><span class="line"><span class="number">5.</span> A-&gt;e</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;该文法的项目有：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> S&#x27;-&gt;·S<span class="number">11.</span> S-&gt;·aec</span><br><span class="line"><span class="number">2.</span> S&#x27;-&gt;S·<span class="number">12.</span> S-&gt;a·ec</span><br><span class="line"><span class="number">3.</span> S-&gt;·aAd<span class="number">13.</span> S-&gt;ae·c</span><br><span class="line"><span class="number">4.</span> S-&gt;a·Ad<span class="number">14.</span> S-&gt;aec·</span><br><span class="line"><span class="number">5.</span> S-&gt;aA·d<span class="number">15.</span> S-&gt;·bed</span><br><span class="line"><span class="number">6.</span> S-&gt;aAd·<span class="number">16.</span> S-&gt;b·ed</span><br><span class="line"><span class="number">7.</span> S-&gt;·bAc<span class="number">17.</span> S-&gt;be·d</span><br><span class="line"><span class="number">8.</span> S-&gt;b·Ac<span class="number">18.</span> S-&gt;bed·</span><br><span class="line"><span class="number">9.</span> S-&gt;bA·c<span class="number">19.</span> A-&gt;·e</span><br><span class="line"><span class="number">10.</span> S-&gt;bAc·<span class="number">20.</span> A-&gt;e·</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;求闭包算法：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">初始状态 I0:S&#x27;-&gt;·S,#  S-&gt;·aAd,#  S-&gt;·bAc,#  S-&gt;·aec,#  S-&gt;·bed,#</span><br><span class="line">I1 =<span class="constructor">GO(I0, S)</span>=<span class="constructor">CLOSURE(S&#x27;-&gt;S·,#)</span></span><br><span class="line"> =&#123;S&#x27;-&gt;S·,#&#125;</span><br><span class="line">I2 =<span class="constructor">GO(I0, <span class="params">a</span>)</span>=<span class="constructor">CLOSURE(S-&gt;<span class="params">a</span>·Ad,#  S-&gt;<span class="params">a</span>·<span class="params">ec</span>,#)</span></span><br><span class="line"> =&#123;S-&gt;a·Ad,#  S-&gt;a·ec,#  A-&gt;·e,d&#125;</span><br><span class="line">I3 =<span class="constructor">GO(I0, <span class="params">b</span>)</span>=<span class="constructor">CLOSURE(S-&gt;<span class="params">b</span>·Ac,#  S-&gt;<span class="params">b</span>·<span class="params">ed</span>,#)</span></span><br><span class="line"> =&#123;S-&gt;b·Ac,#  S-&gt;b·ed,#  A-&gt;·e,c&#125;</span><br><span class="line">I4 =<span class="constructor">GO(I2, A)</span>=<span class="constructor">CLOSURE(S-&gt;<span class="params">aA</span>·<span class="params">d</span>,#)</span></span><br><span class="line"> =&#123;S-&gt;aA·d,#&#125;</span><br><span class="line">I5 =<span class="constructor">GO(I2, <span class="params">e</span>)</span>=<span class="constructor">CLOSURE(S-&gt;<span class="params">ae</span>·<span class="params">c</span>,#  A-&gt;<span class="params">e</span>·,<span class="params">d</span>)</span></span><br><span class="line"> =&#123;S-&gt;ae·c,#  A-&gt;e·,d&#125;</span><br><span class="line">I6 =<span class="constructor">GO(I3, A)</span>=<span class="constructor">CLOSURE(S-&gt;<span class="params">bA</span>·<span class="params">c</span>,#)</span></span><br><span class="line"> =&#123;S-&gt;bA·c,#&#125;</span><br><span class="line">I7 =<span class="constructor">GO(I3, <span class="params">e</span>)</span>=<span class="constructor">CLOSURE(S-&gt;<span class="params">be</span>·<span class="params">d</span>,#  A-&gt;<span class="params">e</span>·,<span class="params">c</span>)</span></span><br><span class="line">  =&#123;S-&gt;be·d,#  A-&gt;e·,c&#125;</span><br><span class="line">I8 =<span class="constructor">GO(I4, <span class="params">d</span>)</span>=<span class="constructor">CLOSURE(S-&gt;<span class="params">aAd</span>·,#)</span></span><br><span class="line"> =&#123;S-&gt;aAd·,#&#125;</span><br><span class="line">I9 =<span class="constructor">GO(I5, <span class="params">c</span>)</span>=<span class="constructor">CLOSURE(S-&gt;<span class="params">aec</span>·,#)</span></span><br><span class="line"> =&#123;S-&gt;aec·,#&#125;</span><br><span class="line">I10=<span class="constructor">GO(I6, <span class="params">c</span>)</span>=<span class="constructor">CLOSURE(S-&gt;<span class="params">bAc</span>·,#)</span></span><br><span class="line"> =&#123;S-&gt;bAc·,#&#125;</span><br><span class="line">I11=<span class="constructor">GO(I7, <span class="params">d</span>)</span>=<span class="constructor">CLOSURE(S-&gt;<span class="params">bed</span>·,#)</span></span><br><span class="line"> =&#123;S-&gt;bed·,#&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;识别活前缀的DFA，如下图所示：</p><p><img src= "/img/loading.gif" data-lazy-src="https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/blog_img/LR%281%29%E5%88%86%E6%9E%90%E5%99%A8.png" alt="image-20200514163516936"></p><p>&emsp;&emsp;LR(1) 分析表，如下所示：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">a</span>bcde#SA</span><br><span class="line"><span class="attribute">0</span>S<span class="number">2</span>S<span class="number">3</span><span class="number">1</span></span><br><span class="line"><span class="attribute">1</span>acc</span><br><span class="line"><span class="attribute">2</span>S<span class="number">5</span><span class="number">4</span></span><br><span class="line"><span class="attribute">3</span>S<span class="number">7</span><span class="number">6</span></span><br><span class="line"><span class="attribute">4</span>S<span class="number">8</span></span><br><span class="line"><span class="attribute">5</span>S<span class="number">9</span>r<span class="number">5</span></span><br><span class="line"><span class="attribute">6</span>S<span class="number">10</span></span><br><span class="line"><span class="attribute">7</span>r<span class="number">5</span>S<span class="number">11</span></span><br><span class="line"><span class="attribute">8</span>r<span class="number">1</span></span><br><span class="line"><span class="attribute">9</span>r<span class="number">3</span></span><br><span class="line"><span class="attribute">10</span>r<span class="number">2</span></span><br><span class="line"><span class="attribute">11</span>r<span class="number">4</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;如果一个文法的 LR(1) 分析表不含多重入口（即任何一个 LR(1) 项目集中无移进-归约冲突或归约-归约冲突），则称该文法为 LR(1) 文法，则称该文法为 LR(1) 文法，所构造的相应分析表为 LR(1) 分析表，使用 LR(1) 分析表的分析器称为 LR(1) 分析器或称规范的 LR 分析器。<strong>一个文法是 LR(0) 文法，就一定也是 SLR(1) 文法，也是 LR(1) 文法，反之则不一定成立。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
          <category> LR分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LR分析 </tag>
            
            <tag> LR(1) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LR分析——LR(1)程序实现</title>
      <link href="2020/11/27/LR%E5%88%86%E6%9E%90%E2%80%94%E2%80%94LR-1-%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0/"/>
      <url>2020/11/27/LR%E5%88%86%E6%9E%90%E2%80%94%E2%80%94LR-1-%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<font size = 3><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;最近学习了自底向上的语法分析，所以用Java语言实现了一个LR(1)分析器，用文件的输入代替人工输入，减少了出错概率。但是LR(1)包含了大量的项目规范族，一定程度上浪费了空间，所以一般还是采用的是LALR(1)文法进行分析，将LR(1)中大量的同心集进行合并。  </p><hr><h2 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h2><p>&emsp;&emsp;文法例子：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">start:</span>S<span class="string">&#x27;</span></span><br><span class="line"><span class="string">0.S&#x27;</span>-&gt;S</span><br><span class="line"><span class="number">1</span>.S-&gt;aAd</span><br><span class="line"><span class="number">2</span>.S-&gt;bAc</span><br><span class="line"><span class="number">3</span>.S-&gt;aec</span><br><span class="line"><span class="number">4</span>.S-&gt;bed</span><br><span class="line"><span class="number">5</span>.A-&gt;e</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;程序初始化相关文法，采用四元式来存放终结符、非终结符、产生式、文法开始符：<br><img src= "/img/loading.gif" data-lazy-src="https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/blog_img/LR%281%29%E7%A8%8B%E5%BA%8F%E5%88%9D%E5%A7%8B%E5%8C%96%E9%83%A8%E5%88%86.png">  </p><p>&emsp;&emsp;项目集规范族求解过程（部分），一共有11个项目集规范族：<br><img src= "/img/loading.gif" data-lazy-src="https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/blog_img/LR%281%29%E9%A1%B9%E7%9B%AE%E9%9B%86%E8%A7%84%E8%8C%83%E6%97%8F%E6%B1%82%E8%A7%A3%E8%BF%87%E7%A8%8B.png">  </p><p>&emsp;&emsp;LR(1)分析表的构造，包含action、goto表：<br><img src= "/img/loading.gif" data-lazy-src="https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/blog_img/LR%281%29%E5%88%86%E6%9E%90%E8%A1%A8%E6%9E%84%E9%80%A0.png">  </p><p>&emsp;&emsp;分析输入串为 <code>bec</code> 的分析过程：<br><img src= "/img/loading.gif" data-lazy-src="https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/blog_img/LR%281%29%E5%88%86%E6%9E%90%E4%B8%B2%E4%B8%BAbec%E7%9A%84%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B.png"></p><hr><h2 id="程序实现算法说明"><a href="#程序实现算法说明" class="headerlink" title="程序实现算法说明"></a>程序实现算法说明</h2><p>&emsp;&emsp;采用面向对象的设计思想，将产生式抽象成一个Derivation类存放左部、右部，将文法和项目集抽象一个Grammar类，按照文法的四元组定义，定义了存放产生式、终结符、非终结符、起始符号。如果要存项目集，还需定义一个用来存放转换弧的字符集变量。<br>按照LR(1)分析法描述，首先对文法进行拓广。分别实现了closure函数、go函数、createDFA函数（构造项目集规范族）、createAnalyseTable函数（构造分析表）、analyse函数（分析过程）。其中构造DFA函数调用了go函数和closure函数，go函数也调用了closure函数。<br>&emsp;&emsp;（1）    closure闭包算法实现  </p><blockquote><p>先假定输入的参数为一个Grammar core，里面包含一个由Derivation和向前查看字符集组成的Map，用来存储项目集的核。<br>然后开始对于这个核求闭包，具体过程为寻找·后面存在非终结符的项目（该过程同时将出现过·后面的所有字符均保存在go字符集中，作为go函数使用的弧，将向前查看字符集作为value），再寻找所有文法的左部是该字符的，将找到文法右部开头加·，然后加入闭包中，循环此过程，最终得到不再增长的闭包。  </p></blockquote><p>&emsp;&emsp;（2）    go函数实现  </p><blockquote><p>go函数应该为GO(I,X)=CLOSURE(J)，所以go函数应该分为以下两步，首先根据要转换的弧X生成新的项目集的核，再根据该核求新的项目集的闭包。由于闭包函数已经单独实现，所以go函数主要需要实现求项目集的核，弧这里设计的为由外界传入，所以需要做的就是根据弧，遍历项目集，寻找所有需要移进的项目，移进生成核。  </p></blockquote><p>&emsp;&emsp;（3）    构造项目集规范族  </p><blockquote><p>项目集规范族（采用面向对象的思想，将项目集规范族抽象为一个对象）的构造，就是先求出I0的核，然后求出I0的闭包。在之后进入循环，将I0放入队列中，I0的所有弧都移进求闭包生成新的项目集，新生成的项目集进队列，直到把队列遍历完，这样整个项目集规范族就构造完成了。  </p></blockquote><p>&emsp;&emsp;（4）    构造LR分析表  </p><blockquote><p>存储LR分析表是由actionTable、goto两个二维数组表示，分析表的列由终结符和非终结符对应的下标组成，行是由多少个项目集规范族的个数构成。移进动作用整数表示，归约动作用负数表示，接受动作用0表示，用一个较大的数例如Integer.MAX_VALUE表示出错。这样查询分析表的时候，就可以直接查询。<br>构造分析表的过程，主要查看两个部分，一个是移进的弧，这个决定了哪些是移进或者跳转的状态。另一部分是查看项目集所有的项目，凡是归约项目的就把所有的action部分放入对应的位置。  </p></blockquote><p>&emsp;&emsp;（5）    对输入句子分析过程  </p><blockquote><p>通过java自带的Stack实现状态栈，符号栈，输入串栈。通过状态栈核输入串栈的栈顶，确定要执行的ACTION动作。通过对输入串的出栈，符号栈的入栈实现移进动作。通过对状态栈的出栈、入栈，符号栈的出栈入栈，实现归约动作。通过状态栈的入栈实现状态的跳转。<br>分析过程的打印，随着分析过程，一步一步输出。如果遇到查找分析表为空说明该句子不符合LR(1)文法，直接打印输出分析出错。</p></blockquote><hr><h3 id="Derivation，产生式对应的实体类"><a href="#Derivation，产生式对应的实体类" class="headerlink" title="Derivation，产生式对应的实体类"></a>Derivation，产生式对应的实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Derivation</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String front;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String end;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Derivation</span><span class="params">(String front, String end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.front = front;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFront</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> front + <span class="string">&quot;-&gt;&quot;</span> + end;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Grammar，四元式文法对应的实体类"><a href="#Grammar，四元式文法对应的实体类" class="headerlink" title="Grammar，四元式文法对应的实体类"></a>Grammar，四元式文法对应的实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Grammar</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文法的非终结符集合 key: symbol  value: index</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Integer&gt; collectionVN = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文法的终结符集合 key: symbol  value: index</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Integer&gt; collectionVT = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文法的产生式集合 key: index  value: derivation</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Integer, Derivation&gt; processes = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文法的开始符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String start;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加非终结符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> symbol 非终结符号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 对应的序号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNotTerminateSymbol</span><span class="params">(String symbol, Integer index)</span> </span>&#123;</span><br><span class="line">        collectionVN.put(symbol, index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加终结符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> symbol 终结符号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 对应的序号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTerminateSymbol</span><span class="params">(String symbol, Integer index)</span> </span>&#123;</span><br><span class="line">        collectionVT.put(symbol, index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加产生式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 产生式序号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> derivation 产生式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addProcesses</span><span class="params">(Integer index, Derivation derivation)</span> </span>&#123;</span><br><span class="line">        processes.put(index, derivation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsVT</span><span class="params">(String terminateSymbol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> collectionVT.containsKey(terminateSymbol);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsVN</span><span class="params">(String notTerminateSymbol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> collectionVN.containsKey(notTerminateSymbol);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Integer&gt; <span class="title">getCollectionVN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> collectionVN;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Integer&gt; <span class="title">getCollectionVT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> collectionVT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Integer, Derivation&gt; <span class="title">getProcesses</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> processes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStart</span><span class="params">(String start)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Grammar&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;collectionVN=&quot;</span> + collectionVN +</span><br><span class="line">                <span class="string">&quot;, collectionVT=&quot;</span> + collectionVT +</span><br><span class="line">                <span class="string">&quot;, processes=&quot;</span> + processes +</span><br><span class="line">                <span class="string">&quot;, start=&#x27;&quot;</span> + start + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="CanonicalCollection，项目规范族对应的实体类"><a href="#CanonicalCollection，项目规范族对应的实体类" class="headerlink" title="CanonicalCollection，项目规范族对应的实体类"></a>CanonicalCollection，项目规范族对应的实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CanonicalCollection</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 项目规范族的标号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer index;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 项目规范族中的核</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Set&lt;String&gt;&gt; itemCore;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 项目规范族中的闭包</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Set&lt;String&gt;&gt; closure;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 项目规范族的转换弧集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Integer&gt; conversion;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CanonicalCollection</span><span class="params">(Integer index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.index = index;</span><br><span class="line">        <span class="keyword">this</span>.itemCore = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.closure = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.conversion = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断该项目规范族中的核，是否包含另一个核</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> coreMap 另一个核的项目闭包集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否包含</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">judgeItemCoreContains</span><span class="params">(Map&lt;String, Set&lt;String&gt;&gt; coreMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> itemCore.equals(coreMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加规范族中的核项目</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> derivation 项目产生式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> forwardSymbolCollection 向前查看字符集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addItemCore</span><span class="params">(String derivation, Set&lt;String&gt; forwardSymbolCollection)</span> </span>&#123;</span><br><span class="line">        itemCore.put(derivation, forwardSymbolCollection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加闭包中的项目</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> derivation 项目产生式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> forwardSymbolCollection 向前查看字符集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addClosureItem</span><span class="params">(String derivation, Set&lt;String&gt; forwardSymbolCollection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (closure.containsKey(derivation)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!closure.get(derivation).equals(forwardSymbolCollection)) &#123;</span><br><span class="line">                <span class="comment">//如果是向前查看字符集不同</span></span><br><span class="line">                closure.get(derivation).addAll(forwardSymbolCollection);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            closure.put(derivation, forwardSymbolCollection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加规范族的转换弧</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> convertSymbol 转换符号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 转换状态的标号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addConversion</span><span class="params">(String convertSymbol, Integer index)</span> </span>&#123;</span><br><span class="line">        conversion.put(convertSymbol, index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Set&lt;String&gt;&gt; getItemCore() &#123;</span><br><span class="line">        <span class="keyword">return</span> itemCore;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Set&lt;String&gt;&gt; getClosure() &#123;</span><br><span class="line">        <span class="keyword">return</span> closure;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Integer&gt; <span class="title">getConversion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> conversion;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span> count = itemCore.size();</span><br><span class="line">        sb.append(<span class="string">&quot;CLOSURE(&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Set&lt;String&gt;&gt; entry : itemCore.entrySet()) &#123;</span><br><span class="line">            sb.append(entry.getKey()).append(<span class="string">&quot;,&quot;</span>).append(entry.getValue());</span><br><span class="line">            <span class="keyword">if</span> (--count != <span class="number">0</span>) &#123;</span><br><span class="line">                sb.append(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(<span class="string">&quot;)\n&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> count1 = closure.size();</span><br><span class="line">        sb.append(<span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Set&lt;String&gt;&gt; entry : closure.entrySet()) &#123;</span><br><span class="line">            sb.append(entry.getKey()).append(<span class="string">&quot;,&quot;</span>).append(entry.getValue());</span><br><span class="line">            <span class="keyword">if</span> (--count1 != <span class="number">0</span>) &#123;</span><br><span class="line">                sb.append(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (conversion.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> count2 = conversion.size();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : conversion.entrySet()) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;GO(I&quot;</span>).append(entry.getValue()).append(<span class="string">&quot;,&quot;</span>).append(entry.getKey()).append(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (--count2 != <span class="number">0</span>) &#123;</span><br><span class="line">                sb.append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="LRAnalysis，LR分析对应的实体类"><a href="#LRAnalysis，LR分析对应的实体类" class="headerlink" title="LRAnalysis，LR分析对应的实体类"></a>LRAnalysis，LR分析对应的实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRAnalysis</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Grammar grammar = <span class="keyword">new</span> Grammar();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String regx = <span class="string">&quot;^[A-Z]?&#x27;?$&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Pattern notTerminate = Pattern.compile(regx);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Integer, CanonicalCollection&gt; canonicalCollectionMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Set&lt;String&gt;&gt; firstCollection = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文法的初始化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 可能发生异常：FileNotFoundException、IOException、其他异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initGrammar</span><span class="params">(String filepath)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (FileReader fileReader = <span class="keyword">new</span> FileReader(<span class="keyword">new</span> File(filepath));</span><br><span class="line">             BufferedReader reader = <span class="keyword">new</span> BufferedReader(fileReader)) &#123;</span><br><span class="line">            String content = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> ((content = reader.readLine()) != <span class="keyword">null</span> &amp;&amp; content.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (content.startsWith(<span class="string">&quot;//&quot;</span>)) &#123;</span><br><span class="line">                    <span class="comment">//说明为注释内容</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (content.startsWith(<span class="string">&quot;start:&quot;</span>)) &#123;</span><br><span class="line">                    <span class="comment">//说明为文法开始符</span></span><br><span class="line">                    grammar.setStart(content.trim().split(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//说明为产生式内容</span></span><br><span class="line">                    String[] pointSplit = content.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">                    String[] arrowSplit = pointSplit[<span class="number">1</span>].split(<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">                    Derivation derivation = <span class="keyword">new</span> Derivation(arrowSplit[<span class="number">0</span>], arrowSplit[<span class="number">1</span>]);</span><br><span class="line">                    grammar.addProcesses(Integer.parseInt(pointSplit[<span class="number">0</span>]), derivation);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;文法对应的文件找不到!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;文法初始化失败!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;其他异常!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据输入文法自动确定终结符和非终结符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initVTAndVN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer, Derivation&gt; processes = grammar.getProcesses();</span><br><span class="line">        <span class="keyword">int</span> notTerminateIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> terminateIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Derivation&gt; process : processes.entrySet()) &#123;</span><br><span class="line">            Derivation derivation = process.getValue();</span><br><span class="line">            <span class="keyword">if</span> (notTerminate.matcher(derivation.getFront()).find() &amp;&amp; !grammar.containsVN(derivation.getFront())) &#123;</span><br><span class="line">                <span class="comment">//如果是属于非终结符并且没有被添加过</span></span><br><span class="line">                grammar.addNotTerminateSymbol(derivation.getFront(), notTerminateIndex++);</span><br><span class="line">            &#125;</span><br><span class="line">            String end = derivation.getEnd();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; end.length(); i++) &#123;</span><br><span class="line">                String currString = end.substring(i, i + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;ε&quot;</span>.equals(currString)) &#123;</span><br><span class="line">                    <span class="comment">//如果是空产生式，则直接跳过</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (notTerminate.matcher(currString).find() &amp;&amp; !grammar.containsVN(currString)) &#123;</span><br><span class="line">                    <span class="comment">//如果产生式右部有非终结符并且没有被添加过</span></span><br><span class="line">                    grammar.addNotTerminateSymbol(currString, notTerminateIndex++);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!notTerminate.matcher(currString).find() &amp;&amp; !grammar.containsVT(currString)) &#123;</span><br><span class="line">                    <span class="comment">//如果是终结符并且没有被添加过</span></span><br><span class="line">                    grammar.addTerminateSymbol(currString, terminateIndex++);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        grammar.addTerminateSymbol(<span class="string">&quot;#&quot;</span>, terminateIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化该文法的First集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initFirstCollection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//终结符的First集</span></span><br><span class="line">        <span class="keyword">for</span> (String terminateSymbol : grammar.getCollectionVT().keySet()) &#123;</span><br><span class="line">            Set&lt;String&gt; temp = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">            temp.add(terminateSymbol);</span><br><span class="line">            firstCollection.put(terminateSymbol, temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//非终结符的First集</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; notTerminateSymbol : grammar.getCollectionVN().entrySet()) &#123;</span><br><span class="line">            List&lt;String&gt; sameNotTerminateDerivation = getSameNotTerminateDerivation(notTerminateSymbol.getKey());</span><br><span class="line">            firstHelper(notTerminateSymbol.getKey(), notTerminateSymbol.getKey(), sameNotTerminateDerivation);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">firstHelper</span><span class="params">(String front, String tempFront, List&lt;String&gt; end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> containsEmpty = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (end != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String s : end) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;ε&quot;</span>.equals(s)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (front.equals(tempFront)) &#123;</span><br><span class="line">                        <span class="comment">//如果是空产生式，则直接添加</span></span><br><span class="line">                        addFirstResult(front, s);</span><br><span class="line">                    &#125;</span><br><span class="line">                    containsEmpty = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (index &lt; s.length()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (grammar.containsVT(s.substring(index, index + <span class="number">1</span>))) &#123;</span><br><span class="line">                        <span class="comment">//如果是终结符，则直接添加</span></span><br><span class="line">                        addFirstResult(front, s.substring(index, index + <span class="number">1</span>));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//如果是非终结符，则递归调用</span></span><br><span class="line">                        <span class="keyword">if</span> (tempFront.equals(s.substring(index, index + <span class="number">1</span>))) &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (firstHelper(front, s.substring(index, index + <span class="number">1</span>), getSameNotTerminateDerivation(s.substring(index, index + <span class="number">1</span>)))) &#123;</span><br><span class="line">                            index++;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (front.equals(tempFront) &amp;&amp; index == s.length()) &#123;</span><br><span class="line">                    addFirstResult(front, <span class="string">&quot;ε&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> containsEmpty;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">getSameNotTerminateDerivation</span><span class="params">(String notTerminateSymbol)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; sameNotTerminateDerivation = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Derivation&gt; entry : grammar.getProcesses().entrySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (entry.getValue().getFront().equals(notTerminateSymbol)) &#123;</span><br><span class="line">                sameNotTerminateDerivation.add(entry.getValue().getEnd());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sameNotTerminateDerivation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加First集的结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> notTerminateSymbol 非终结符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> firstSymbol        first集中的符号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addFirstResult</span><span class="params">(String notTerminateSymbol, String firstSymbol)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; firstSymbolSet = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (firstCollection.containsKey(notTerminateSymbol)) &#123;</span><br><span class="line">            firstSymbolSet = firstCollection.get(notTerminateSymbol);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            firstSymbolSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">            firstCollection.put(notTerminateSymbol, firstSymbolSet);</span><br><span class="line">        &#125;</span><br><span class="line">        firstSymbolSet.add(firstSymbol);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建项目集规范族</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createDFA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取初始状态I0</span></span><br><span class="line">        String start = grammar.getStart();</span><br><span class="line">        String startCore = closureHelper(start, <span class="string">&quot;&quot;</span>).get(<span class="number">0</span>);</span><br><span class="line">        CanonicalCollection initState = <span class="keyword">new</span> CanonicalCollection(<span class="number">0</span>);</span><br><span class="line">        Set&lt;String&gt; forwardSymbol = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        forwardSymbol.add(<span class="string">&quot;#&quot;</span>);</span><br><span class="line">        initState.addItemCore(startCore, forwardSymbol);</span><br><span class="line">        canonicalCollectionMap.put(<span class="number">0</span>, initState);</span><br><span class="line">        closure(initState.getItemCore(), initState);</span><br><span class="line">        go(initState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[][] createAnalyseActionTable() &#123;</span><br><span class="line">        String start = grammar.getStart();</span><br><span class="line">        String accept = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Derivation&gt; entry : grammar.getProcesses().entrySet()) &#123;</span><br><span class="line">            Derivation derivation = entry.getValue();</span><br><span class="line">            <span class="keyword">if</span> (derivation.getFront().equals(start)) &#123;</span><br><span class="line">                accept = derivation.toString() + <span class="string">&quot;·&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> colMax = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> rowMax = canonicalCollectionMap.size();</span><br><span class="line">        <span class="keyword">for</span> (Integer value : grammar.getCollectionVT().values()) &#123;</span><br><span class="line">            colMax = Math.max(colMax, value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[][] actionTable = <span class="keyword">new</span> <span class="keyword">int</span>[rowMax][colMax + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rowMax; i++) &#123;</span><br><span class="line">            Arrays.fill(actionTable[i], Integer.MAX_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rowMax; i++) &#123;</span><br><span class="line">            CanonicalCollection canonicalCollection = canonicalCollectionMap.get(i);</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, Set&lt;String&gt;&gt; entry : canonicalCollection.getClosure().entrySet()) &#123;</span><br><span class="line">                String key = entry.getKey();</span><br><span class="line">                <span class="keyword">if</span> (key.indexOf(<span class="string">&quot;·&quot;</span>) == key.length() - <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (key.equals(accept)) &#123;</span><br><span class="line">                        <span class="comment">//如果是接受acc</span></span><br><span class="line">                        actionTable[i][grammar.getCollectionVT().get(<span class="string">&quot;#&quot;</span>)] = <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">int</span> derivationIndex = getIndexByDerivation(key.substring(<span class="number">0</span>, key.indexOf(<span class="string">&quot;·&quot;</span>)));</span><br><span class="line">                        <span class="keyword">for</span> (String s : entry.getValue()) &#123;</span><br><span class="line">                            actionTable[i][grammar.getCollectionVT().get(s)] = -derivationIndex;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : canonicalCollection.getConversion().entrySet()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!notTerminate.matcher(entry.getKey()).find()) &#123;</span><br><span class="line">                    <span class="comment">//如果是终结符</span></span><br><span class="line">                    actionTable[i][grammar.getCollectionVT().get(entry.getKey())] = entry.getValue();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> actionTable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[][] createAnalyseGoToTable() &#123;</span><br><span class="line">        <span class="keyword">int</span> colMax = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> rowMax = canonicalCollectionMap.size();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : grammar.getCollectionVN().entrySet()) &#123;</span><br><span class="line">            colMax = Math.max(colMax, entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[][] gotoTable = <span class="keyword">new</span> <span class="keyword">int</span>[rowMax][colMax + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rowMax; i++) &#123;</span><br><span class="line">            Arrays.fill(gotoTable[i], Integer.MAX_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rowMax; i++) &#123;</span><br><span class="line">            CanonicalCollection canonicalCollection = canonicalCollectionMap.get(i);</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : canonicalCollection.getConversion().entrySet()) &#123;</span><br><span class="line">                String key = entry.getKey();</span><br><span class="line">                <span class="keyword">if</span> (notTerminate.matcher(key).find()) &#123;</span><br><span class="line">                    <span class="comment">//如果是非终结符</span></span><br><span class="line">                    gotoTable[i][grammar.getCollectionVN().get(key)] = entry.getValue();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> gotoTable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">analyse</span><span class="params">(<span class="keyword">int</span>[][] actionTable, <span class="keyword">int</span>[][] gotoTable, String input)</span> </span>&#123;</span><br><span class="line">        Stack&lt;String&gt; inputStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        Stack&lt;Integer&gt; stateStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        Stack&lt;String&gt; symbolStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="comment">//init inputStack</span></span><br><span class="line">        inputStack.push(<span class="string">&quot;#&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = input.length(); i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            inputStack.push(input.substring(i - <span class="number">1</span>, i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//init stateStack and symbolStack</span></span><br><span class="line">        stateStack.push(<span class="number">0</span>);</span><br><span class="line">        symbolStack.push(<span class="string">&quot;#&quot;</span>);</span><br><span class="line">        <span class="keyword">boolean</span> judgeFlag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> spanNum = <span class="number">20</span>;</span><br><span class="line">        StringBuilder title = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        title.append(<span class="string">&quot;step&quot;</span>).append(getEmptyString(<span class="number">10</span> - <span class="string">&quot;step&quot;</span>.length()))</span><br><span class="line">                .append(<span class="string">&quot;stateStack&quot;</span>).append(getEmptyString(spanNum - <span class="string">&quot;stateStack&quot;</span>.length()))</span><br><span class="line">                .append(<span class="string">&quot;symbolStack&quot;</span>).append(getEmptyString(spanNum - <span class="string">&quot;symbolStack&quot;</span>.length()))</span><br><span class="line">                .append(<span class="string">&quot;inputString&quot;</span>).append(getEmptyString(spanNum - <span class="string">&quot;inputString&quot;</span>.length()))</span><br><span class="line">                .append(<span class="string">&quot;ACTION&quot;</span>).append(getEmptyString(spanNum - <span class="string">&quot;ACTION&quot;</span>.length()))</span><br><span class="line">                .append(<span class="string">&quot;GOTO&quot;</span>).append(getEmptyString(spanNum - <span class="string">&quot;GOTO&quot;</span>.length()));</span><br><span class="line">        System.out.println(title);</span><br><span class="line">        <span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> action = actionTable[stateStack.peek()][grammar.getCollectionVT().get(inputStack.peek())];</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            sb.append(step).append(getEmptyString(<span class="number">10</span> - Integer.toString(step).length()));</span><br><span class="line">            step++;</span><br><span class="line">            <span class="comment">//get stateStack String</span></span><br><span class="line">            String stackToString = getIntegerStackToString(stateStack);</span><br><span class="line">            <span class="comment">//get symbolStack String</span></span><br><span class="line">            String symbolStackString = getStringStackToString(<span class="keyword">true</span>, symbolStack);</span><br><span class="line">            <span class="comment">//get inputStack String</span></span><br><span class="line">            String inputStackString = getStringStackToString(<span class="keyword">false</span>, inputStack);</span><br><span class="line">            sb.append(stackToString).append(getEmptyString(spanNum - stackToString.length()))</span><br><span class="line">                    .append(symbolStackString).append(getEmptyString(spanNum - symbolStackString.length()))</span><br><span class="line">                    .append(inputStackString).append(getEmptyString(spanNum - inputStackString.length()));</span><br><span class="line">            <span class="keyword">if</span> (action == Integer.MAX_VALUE) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (action &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//表示移进</span></span><br><span class="line">                symbolStack.push(inputStack.pop());</span><br><span class="line">                stateStack.push(action);</span><br><span class="line">                String temp = <span class="string">&quot;S&quot;</span> + action;</span><br><span class="line">                sb.append(temp).append(getEmptyString(spanNum - temp.length()));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//表示归约</span></span><br><span class="line">                String temp = <span class="string">&quot;r&quot;</span> + Math.abs(action);</span><br><span class="line">                sb.append(temp).append(getEmptyString(spanNum - temp.length()));</span><br><span class="line">                Derivation derivation = grammar.getProcesses().get(Math.abs(action));</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; derivation.getEnd().length(); i++) &#123;</span><br><span class="line">                    symbolStack.pop();</span><br><span class="line">                    stateStack.pop();</span><br><span class="line">                &#125;</span><br><span class="line">                symbolStack.push(derivation.getFront());</span><br><span class="line">                <span class="comment">//查找GOTO表</span></span><br><span class="line">                <span class="keyword">int</span> goNext = gotoTable[stateStack.peek()][grammar.getCollectionVN().get(derivation.getFront())];</span><br><span class="line">                <span class="keyword">if</span> (goNext != Integer.MAX_VALUE) &#123;</span><br><span class="line">                    stateStack.push(goNext);</span><br><span class="line">                    sb.append(goNext).append(getEmptyString(spanNum - Integer.toString(goNext).length()));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//表示接受</span></span><br><span class="line">                judgeFlag = <span class="keyword">true</span>;</span><br><span class="line">                sb.append(<span class="string">&quot;acc&quot;</span>);</span><br><span class="line">                System.out.println(sb.toString());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(sb.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> judgeFlag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getStringStackToString</span><span class="params">(<span class="keyword">boolean</span> forward, Stack&lt;String&gt; stack)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> total = stack.size();</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">if</span> (forward) &#123;</span><br><span class="line">            <span class="comment">//正向打印序列</span></span><br><span class="line">            <span class="keyword">for</span> (String s : stack) &#123;</span><br><span class="line">                sb.append(s);</span><br><span class="line">                <span class="keyword">if</span> (--total != <span class="number">0</span>) &#123;</span><br><span class="line">                    sb.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//逆向打印序列</span></span><br><span class="line">            List&lt;String&gt; temp = <span class="keyword">new</span> ArrayList&lt;&gt;(stack);</span><br><span class="line">            Collections.reverse(temp);</span><br><span class="line">            <span class="keyword">for</span> (String s : temp) &#123;</span><br><span class="line">                sb.append(s);</span><br><span class="line">                <span class="keyword">if</span> (--total != <span class="number">0</span>) &#123;</span><br><span class="line">                    sb.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getIntegerStackToString</span><span class="params">(Stack&lt;Integer&gt; stack)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> total = stack.size();</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (Integer num : stack) &#123;</span><br><span class="line">            sb.append(num);</span><br><span class="line">            <span class="keyword">if</span> (--total != <span class="number">0</span>) &#123;</span><br><span class="line">                sb.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getIndexByDerivation</span><span class="params">(String derivation)</span> </span>&#123;</span><br><span class="line">        String[] strings = derivation.split(<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Derivation&gt; entry : grammar.getProcesses().entrySet()) &#123;</span><br><span class="line">            Derivation value = entry.getValue();</span><br><span class="line">            <span class="keyword">if</span> (value.getFront().equals(strings[<span class="number">0</span>]) &amp;&amp; value.getEnd().equals(strings[<span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="keyword">return</span> entry.getKey();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态转换函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> initState 初始状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">(CanonicalCollection initState)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; changeSymbolList = <span class="keyword">new</span> ArrayList&lt;&gt;(grammar.getCollectionVN().keySet());</span><br><span class="line">        changeSymbolList.addAll(grammar.getCollectionVT().keySet());</span><br><span class="line">        Queue&lt;CanonicalCollection&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.add(initState);</span><br><span class="line">        Map&lt;String, Set&lt;String&gt;&gt; tempCoreItem = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (queue.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            CanonicalCollection currState = queue.poll();</span><br><span class="line">            <span class="keyword">for</span> (String changeSymbol : changeSymbolList) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Map.Entry&lt;String, Set&lt;String&gt;&gt; closureEntry : currState.getClosure().entrySet()) &#123;</span><br><span class="line">                    String beforeConvert = closureEntry.getKey();</span><br><span class="line">                    <span class="keyword">int</span> pointIndex = beforeConvert.indexOf(<span class="string">&quot;·&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (pointIndex != beforeConvert.length() - <span class="number">1</span>) &#123;</span><br><span class="line">                        String nextConvertString = beforeConvert.substring(pointIndex + <span class="number">1</span>, pointIndex + <span class="number">2</span>);</span><br><span class="line">                        <span class="keyword">if</span> (nextConvertString.equals(changeSymbol)) &#123;</span><br><span class="line">                            tempCoreItem.put(pointMoveOneStep(beforeConvert, pointIndex), closureEntry.getValue());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (tempCoreItem.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    Integer nextState = checkHaveCalculate(tempCoreItem);</span><br><span class="line">                    <span class="keyword">if</span> (nextState == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        currState.addConversion(changeSymbol, index);</span><br><span class="line">                        CanonicalCollection convertAfter = <span class="keyword">new</span> CanonicalCollection(index++);</span><br><span class="line">                        canonicalCollectionMap.put(convertAfter.getIndex(), convertAfter);</span><br><span class="line">                        <span class="keyword">for</span> (Map.Entry&lt;String, Set&lt;String&gt;&gt; entry : tempCoreItem.entrySet()) &#123;</span><br><span class="line">                            convertAfter.addItemCore(entry.getKey(), entry.getValue());</span><br><span class="line">                        &#125;</span><br><span class="line">                        closure(tempCoreItem, convertAfter);</span><br><span class="line">                        queue.add(convertAfter);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        currState.addConversion(changeSymbol, nextState);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                tempCoreItem.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Integer <span class="title">checkHaveCalculate</span><span class="params">(Map&lt;String, Set&lt;String&gt;&gt; coreItem)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Set&lt;String&gt;&gt; entry : coreItem.entrySet()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;Integer, CanonicalCollection&gt; canonicalCollectionEntry : canonicalCollectionMap.entrySet()) &#123;</span><br><span class="line">                CanonicalCollection canonicalCollection = canonicalCollectionEntry.getValue();</span><br><span class="line">                <span class="comment">/*if (canonicalCollection.judgeItemCoreContains(entry.getKey(), entry.getValue())) &#123;</span></span><br><span class="line"><span class="comment">                    return canonicalCollectionEntry.getKey();</span></span><br><span class="line"><span class="comment">                &#125;*/</span></span><br><span class="line">                <span class="keyword">if</span> (canonicalCollection.judgeItemCoreContains(coreItem)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> canonicalCollectionEntry.getKey();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">pointMoveOneStep</span><span class="params">(String curr, <span class="keyword">int</span> pointIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] charArray = curr.toCharArray();</span><br><span class="line">        <span class="keyword">char</span> temp = charArray[pointIndex + <span class="number">1</span>];</span><br><span class="line">        charArray[pointIndex + <span class="number">1</span>] = charArray[pointIndex];</span><br><span class="line">        charArray[pointIndex] = temp;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(charArray);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 求闭包函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> coreMap             核集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> canonicalCollection 闭包对应的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">closure</span><span class="params">(Map&lt;String, Set&lt;String&gt;&gt; coreMap, CanonicalCollection canonicalCollection)</span> </span>&#123;</span><br><span class="line">        Queue&lt;String&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Set&lt;String&gt;&gt; entry : coreMap.entrySet()) &#123;</span><br><span class="line">            canonicalCollection.addClosureItem(entry.getKey(), entry.getValue());</span><br><span class="line">            <span class="keyword">if</span> (nextSymbolIsNotTerminate(entry.getKey())) &#123;</span><br><span class="line">                queue.add(entry.getKey());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;String&gt; haveSeen = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (queue.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//待求闭包的产生式 A -&gt;·Aa</span></span><br><span class="line">            String beforeDerivation = queue.poll();</span><br><span class="line">            <span class="keyword">int</span> pointIndex = beforeDerivation.indexOf(<span class="string">&quot;·&quot;</span>);</span><br><span class="line">            String nextSymbol = beforeDerivation.substring(pointIndex + <span class="number">1</span>, pointIndex + <span class="number">2</span>);</span><br><span class="line">            List&lt;String&gt; stringList = closureHelper(nextSymbol, beforeDerivation);</span><br><span class="line">            <span class="keyword">for</span> (String afterDerivation : stringList) &#123;</span><br><span class="line">                <span class="keyword">if</span> (pointIndex + <span class="number">2</span> &lt; beforeDerivation.length()) &#123;</span><br><span class="line">                    String nextFirstSymbol = beforeDerivation.substring(pointIndex + <span class="number">2</span>, pointIndex + <span class="number">3</span>);</span><br><span class="line">                    Set&lt;String&gt; temp = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">                    <span class="keyword">if</span> (firstCollection.get(nextFirstSymbol).contains(<span class="string">&quot;ε&quot;</span>)) &#123;</span><br><span class="line">                        temp.addAll(canonicalCollection.getClosure().get(beforeDerivation));</span><br><span class="line">                    &#125;</span><br><span class="line">                    temp.addAll(firstCollection.get(nextFirstSymbol));</span><br><span class="line">                    canonicalCollection.addClosureItem(afterDerivation, temp);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    addClosureItemHelper(canonicalCollection, beforeDerivation, afterDerivation);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!haveSeen.contains(afterDerivation)) &#123;</span><br><span class="line">                    queue.add(afterDerivation);</span><br><span class="line">                &#125;</span><br><span class="line">                haveSeen.add(afterDerivation);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addClosureItemHelper</span><span class="params">(CanonicalCollection canonicalCollection, String beforeDerivation, String afterDerivation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (canonicalCollection.getClosure().containsKey(afterDerivation)) &#123;</span><br><span class="line">            Set&lt;String&gt; afterSet = canonicalCollection.getClosure().get(afterDerivation);</span><br><span class="line">            afterSet.addAll(canonicalCollection.getClosure().get(beforeDerivation));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            canonicalCollection.getClosure().put(afterDerivation, <span class="keyword">new</span> HashSet&lt;&gt;(canonicalCollection.getClosure().get(beforeDerivation)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">nextSymbolIsNotTerminate</span><span class="params">(String curr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> res = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> pointIndex = curr.indexOf(<span class="string">&quot;·&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (pointIndex != curr.length() - <span class="number">1</span> &amp;&amp; grammar.containsVN(curr.substring(pointIndex + <span class="number">1</span>, pointIndex + <span class="number">2</span>))) &#123;</span><br><span class="line">            res = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">closureHelper</span><span class="params">(String currSymbol, String currDerivation)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Derivation&gt; entry : grammar.getProcesses().entrySet()) &#123;</span><br><span class="line">            Derivation derivation = entry.getValue();</span><br><span class="line">            <span class="keyword">if</span> (derivation.getFront().equals(currSymbol)) &#123;</span><br><span class="line">                String temp = currSymbol + <span class="string">&quot;-&gt;·&quot;</span> + derivation.getEnd();</span><br><span class="line">                <span class="keyword">if</span> (!temp.equals(currDerivation)) &#123;</span><br><span class="line">                    result.add(temp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getEmptyString</span><span class="params">(<span class="keyword">int</span> spaceCount)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span> (spaceCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            spaceCount--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startLR1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入文法所在绝对路径：&quot;</span>);</span><br><span class="line">        String filepath = sc.next();</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            initGrammar(filepath);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;文法初始化失败，请检查文件输入情况!&quot;</span>);</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        initVTAndVN();</span><br><span class="line">        initFirstCollection();</span><br><span class="line">        createDFA();</span><br><span class="line">        System.out.println(<span class="string">&quot;===============文法初始化================&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;VN=&quot;</span> + grammar.getCollectionVN());</span><br><span class="line">        System.out.println(<span class="string">&quot;VT=&quot;</span> + grammar.getCollectionVT());</span><br><span class="line">        System.out.println(<span class="string">&quot;S=&quot;</span> + grammar.getStart());</span><br><span class="line">        System.out.println(<span class="string">&quot;derivation=&quot;</span> + grammar.getProcesses());</span><br><span class="line">        System.out.println(<span class="string">&quot;FirstCollection=&quot;</span> + firstCollection);</span><br><span class="line">        <span class="keyword">for</span> (Integer key : canonicalCollectionMap.keySet()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;========================================&quot;</span>);</span><br><span class="line">            System.out.print(<span class="string">&quot;状态I&quot;</span> + key+ <span class="string">&quot;:&quot;</span>);</span><br><span class="line">            System.out.println(canonicalCollectionMap.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;=================================LR(1)分析表================================&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span>[][] actionTable = createAnalyseActionTable();</span><br><span class="line">        <span class="keyword">int</span>[][] gotoTable = createAnalyseGoToTable();</span><br><span class="line">        Map&lt;String, Integer&gt; collectionVT = grammar.getCollectionVT();</span><br><span class="line">        Map&lt;String, Integer&gt; collectionVN = grammar.getCollectionVN();</span><br><span class="line">        <span class="keyword">int</span> rowSize = canonicalCollectionMap.size();</span><br><span class="line">        <span class="keyword">int</span> spanEach = <span class="number">8</span>;</span><br><span class="line">        StringBuilder title = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        title.append(getEmptyString(spanEach));</span><br><span class="line">        <span class="keyword">for</span> (String s : collectionVT.keySet()) &#123;</span><br><span class="line">            title.append(s).append(getEmptyString(spanEach - s.length()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (String s : collectionVN.keySet()) &#123;</span><br><span class="line">            title.append(s).append(getEmptyString(spanEach - s.length()));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(title.toString());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rowSize; i++) &#123;</span><br><span class="line">            StringBuilder eachRowBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            eachRowBuilder.append(i).append(getEmptyString(spanEach - Integer.toString(i).length()));</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; actionTable[<span class="number">0</span>].length + gotoTable[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= actionTable[<span class="number">0</span>].length) &#123;</span><br><span class="line">                    <span class="keyword">int</span> data = gotoTable[i][j % actionTable[<span class="number">0</span>].length];</span><br><span class="line">                    <span class="keyword">if</span> (data != Integer.MAX_VALUE) &#123;</span><br><span class="line">                        eachRowBuilder.append(data).append(getEmptyString(spanEach - Integer.toString(data).length()));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        eachRowBuilder.append(getEmptyString(spanEach));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> data = actionTable[i][j];</span><br><span class="line">                    <span class="keyword">if</span> (data != Integer.MAX_VALUE) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (data &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                            String temp = <span class="string">&quot;r&quot;</span> + Math.abs(data);</span><br><span class="line">                            eachRowBuilder.append(temp).append(getEmptyString(spanEach - temp.length()));</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            String temp = <span class="string">&quot;S&quot;</span> + data;</span><br><span class="line">                            eachRowBuilder.append(temp).append(getEmptyString(spanEach - temp.length()));</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            eachRowBuilder.append(<span class="string">&quot;acc&quot;</span>).append(getEmptyString(spanEach - <span class="string">&quot;acc&quot;</span>.length()));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        eachRowBuilder.append(getEmptyString(spanEach));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(eachRowBuilder.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;===========================================================================&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入输入串：&quot;</span>);</span><br><span class="line">        String input = sc.next();</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">if</span> (input.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> analyse = analyse(actionTable, gotoTable, input);</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;输入串为 %s 的分析结果：%b&quot;</span>, input, analyse));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入的输入串有误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> LRAnalysis().startLR1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
          <category> LR分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LR分析 </tag>
            
            <tag> LR(1) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LR分析——LR(0)分析器</title>
      <link href="2020/11/27/LR%E5%88%86%E6%9E%90%E2%80%94%E2%80%94LR-0-%E5%88%86%E6%9E%90%E5%99%A8/"/>
      <url>2020/11/27/LR%E5%88%86%E6%9E%90%E2%80%94%E2%80%94LR-0-%E5%88%86%E6%9E%90%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;<strong>LR(0) 分析器</strong>的分析能力最弱，它甚至不能分析简单的算术表达式文法，但它是构造其他三种 LR 分析器的基础。</p><p>&emsp;&emsp;<strong>SLR(1) 分析器</strong> 是为了解决构造 LR(0) 分析器时所出现的问题而形成的一种方法，其分析能力稍强于 LR(0) 分析器。</p><p>&emsp;&emsp;<strong>LR(1) 分析器</strong> 的分析能力最强，但是代价也最高。</p><p>&emsp;&emsp;<strong>LALR(1) 分析器</strong> 的能力和代价均介于 SLR(1) 和 LR(1) 之间，LALR(1) 方法可用于大多数程序设计语言的文法，并且可以高效地实现。</p><h4 id="LR分析器组成部分"><a href="#LR分析器组成部分" class="headerlink" title="LR分析器组成部分"></a>LR分析器组成部分</h4><p>&emsp;&emsp;一个 LR 分析器由 3 个部分组成：</p><ol><li>总控程序，也可以称为驱动程序。对所有的 LR 分析器，总控程序都是相同的。</li><li>分析表或分析函数。不同的文法分析表将不同，同一个文法采用的 LR 分析器不同时，分析表也不同，分析表又可分为动作（ACTION）表和状态转换（GOTO）表两个部分，它们都可以用二维数组表示。</li><li>分析栈，包括文法符号栈和相应的状态栈。它们均是先进后出栈。</li></ol><p>&emsp;&emsp;分析器的动作由栈顶状态和当前输入符号来决定（LR(0) 分析器不需向前查看输入符号）。</p><hr><h2 id="LR-0-分析"><a href="#LR-0-分析" class="headerlink" title="LR(0)分析"></a>LR(0)分析</h2><p>&emsp;&emsp;LR(0)项目集规范族的项目，有四种：</p><ul><li><strong>移进项目</strong>。原点后为终结符的项目，形如 A-&gt;α·aβ，其中 α,β∈V^*^，a∈V<del>T</del>，相应的状态为移进状态。</li><li><strong>归约项目</strong>。原点在产生式右部最后的项目，形如 A-&gt;β·，其中 β∈V^*^，对于 β=ε 的项目为 A-&gt;·（对应的产生式为 A-&gt;ε），相应的状态为归约状态。</li><li><strong>待约项目</strong>。原点后为非终结符的项目，形如 A-&gt;α·Bβ，其中 α,β∈V^*^，B∈V<del>N</del>，这表明用产生式 A 的右部归约时，首先要将 B 的产生式右部归约为 B，对 A 的右部才能继续进行分析。也就是期待着继续分析过程中首先要能进行归约得到 B。</li><li><strong>接受项目</strong>。当归约项目为 S‘-&gt;S· 时，则表明已分析成功，即输入串为为该文法的句子，相应状态为接受状态。</li></ul><h4 id="LR-0-限定要求"><a href="#LR-0-限定要求" class="headerlink" title="LR(0)限定要求"></a>LR(0)限定要求</h4><p>&emsp;&emsp;对于一个文法的LR(0)项目集规范族<font color='red'>不存在移进-归约或归约-归约冲突</font>时，称这个文法为LR(0)文法。</p><hr><h4 id="LR-0-分析表构造"><a href="#LR-0-分析表构造" class="headerlink" title="LR(0)分析表构造"></a>LR(0)分析表构造</h4><p>&emsp;&emsp;假设已经构造出LR(0)项目集规范族为：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">C</span>=&#123;I<span class="number">0</span>,I<span class="number">1</span>,...,In&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;其中 I<del>K</del> 为项目集的名字，k 为状态名，令包含 S‘-&gt;·S 项目的集合 I<del>k</del> 的下标k为分析器的初始状态。那么分析表的 ACTION 表和 GOTO 表的构造步骤如下：</p><ol><li>若项目 A-&gt;α·aβ 属于 I<del>k</del> 且转换函数 GO(I<del>k</del>, a) = I<del>j</del>，当 a 为终结符时则置 ACTION[k, a] 为S<del>j</del>，其动作含义为将终结符 a 移进符号栈，状态 j 进入状态栈（相当于在状态 k 时遇 a 转向状态 j）。</li><li>若项目 A-&gt;α· 属于 I<del>k</del>，则对任何终结符 a 和 # 号置 ACTION[k, a] 和 ACTION[k, #] 为 r<del>j</del>，j 为文法 G‘ 中某产生式 A-&gt; α 的序号。r<del>j</del> 动作的含义是把当前文法符号栈顶的符号串 α 归约为 A，并将栈指针从栈顶向下移动 |a| 的长度，符号栈中弹出 |a| 个符号，非终结符 A 变为当前面临的符号。</li><li>若 GO(I<del>k</del>, A) = I<del>j</del>，则置 GOTO[k, A] 为 “j”,其中 A 为非终结符，表示当前状态为 “k” 时，遇文法符号 A 时状态应转向为 j，因此 A 移入文法符号，j 移入状态栈。</li><li>若项目 S’-&gt;S· 属于 I<del>k</del>，则置 ACTION[k, #] 为 acc，表示接受。</li><li>反不能用上述方法填入的分析表的元素，均应填上报错标志。</li></ol><hr><h4 id="LR-0-分析器的工作过程"><a href="#LR-0-分析器的工作过程" class="headerlink" title="LR(0)分析器的工作过程"></a>LR(0)分析器的工作过程</h4><p>&emsp;&emsp;根据输入串的当前符号和分析栈的栈顶状态查找分析表应采取的动作，对状态栈和符号栈进行相应的操作，即移进、归约、接受或报错。具体说明如下：</p><ol><li>若 ACTION[S, a] = S<del>j</del>，a 为终结符，则把 a 移入符号栈，j 移入状态栈。</li><li>若 ACTION[S, a] = r<del>j</del>，a 为终结符或 # 号，则用第 j 个产生式归约，并将两个栈的指针减去 k，其中 k 为第 j 个产生式右部的符号串长度，这时当前面临符号为第 j 个产生式左部的非终结符，不妨设为 A，归约后栈顶状态设为 n，则再进行 GOTO[n, A]。</li><li>若 ACTION[S, a] = acc，a 应为 # 号，则为接受，表示分析成功。</li><li>若 GOTO[S, A] = j，A 为非终结符，表明前一动作是用关于 A 的产生式归约的，当前面临的非终结符 A 应移入符号栈，j 移入状态栈。对于终结符的 GOTO[S, a] 已和 ACTION[S, a] 重合。</li><li>若 ACTION[S, a] 为空白，则转向出错处理。</li></ol><hr><h4 id="LR-0-例子"><a href="#LR-0-例子" class="headerlink" title="LR(0)例子"></a>LR(0)例子</h4><p>&emsp;&emsp;文法定义如下：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">S&#x27;-&gt;E</span><br><span class="line">E-&gt;aA|<span class="type">bB</span></span><br><span class="line">A-&gt;cA|<span class="type">d</span></span><br><span class="line">B-&gt;cB|<span class="type">d</span></span><br><span class="line">=====================</span><br><span class="line"><span class="number">0.</span> S&#x27;-&gt;E</span><br><span class="line"><span class="number">1.</span> E-&gt;aA</span><br><span class="line"><span class="number">2.</span> E-&gt;bB</span><br><span class="line"><span class="number">3.</span> A-&gt;cA</span><br><span class="line"><span class="number">4.</span> A-&gt;d</span><br><span class="line"><span class="number">5.</span> B-&gt;cB</span><br><span class="line"><span class="number">6.</span> B-&gt;d</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;该文法的项目有：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> S&#x27;-&gt;·E<span class="number">10.</span> A-&gt;d·</span><br><span class="line"><span class="number">2.</span> S&#x27;-&gt;E·<span class="number">11.</span> E-&gt;·bB</span><br><span class="line"><span class="number">3.</span> E-&gt;·aA<span class="number">12.</span> E-&gt;b·B</span><br><span class="line"><span class="number">4.</span> E-&gt;a·A<span class="number">13.</span> E-&gt;bB·</span><br><span class="line"><span class="number">5.</span> E-&gt;aA·<span class="number">14.</span> B-&gt;·cB</span><br><span class="line"><span class="number">6.</span> A-&gt;·cA<span class="number">15.</span> B-&gt;c·B</span><br><span class="line"><span class="number">7.</span> A-&gt;c·A<span class="number">16.</span> B-&gt;cB·</span><br><span class="line"><span class="number">8.</span> A-&gt;cA·<span class="number">17.</span> B-&gt;·d</span><br><span class="line"><span class="number">9.</span> A-&gt;·d<span class="number">18.</span> B-&gt;d·</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;求闭包算法：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">初始状态 I0:S&#x27;-&gt;·E  E-&gt;·aA  E-&gt;·bB</span><br><span class="line">I1 =<span class="constructor">GO(I0, E)</span>=<span class="constructor">CLOSURE(S&#x27;-&gt;E·)</span>=&#123;S&#x27;-&gt;E·&#125;</span><br><span class="line">I2 =<span class="constructor">GO(I0, <span class="params">a</span>)</span>=<span class="constructor">CLOSURE(E-&gt;<span class="params">a</span>·A)</span>=&#123;E-&gt;a·A, A-&gt;·cA, A-&gt;·d&#125;</span><br><span class="line">I3 =<span class="constructor">GO(I0, <span class="params">b</span>)</span>=<span class="constructor">CLOSURE(E-&gt;<span class="params">b</span>·B)</span>=&#123;E-&gt;b·B, B-&gt;·cB, B-&gt;·d&#125;</span><br><span class="line">I4 =<span class="constructor">GO(I2, A)</span>=<span class="constructor">CLOSURE(E-&gt;<span class="params">aA</span>·)</span>=&#123;E-&gt;aA·&#125;</span><br><span class="line">I5 =<span class="constructor">GO(I2, <span class="params">c</span>)</span>=<span class="constructor">CLOSURE(A-&gt;<span class="params">c</span>·A)</span>=&#123;A-&gt;c·A, A-&gt;·cA, A-&gt;·d&#125;</span><br><span class="line">I6 =<span class="constructor">GO(I2, <span class="params">d</span>)</span>=<span class="constructor">CLOSURE(A-&gt;<span class="params">d</span>·)</span> =&#123;A-&gt;d·&#125;</span><br><span class="line">I7 =<span class="constructor">GO(I3, B)</span>=<span class="constructor">CLOSURE(E-&gt;<span class="params">bB</span>·)</span>=&#123;E-&gt;bB·&#125;</span><br><span class="line">I8 =<span class="constructor">GO(I3, <span class="params">c</span>)</span>=<span class="constructor">CLOSURE(B-&gt;<span class="params">c</span>·B)</span>=&#123;B-&gt;c·B, B-&gt;·cB, B-&gt;·d&#125;</span><br><span class="line">I9 =<span class="constructor">GO(I3, <span class="params">d</span>)</span>=<span class="constructor">CLOSURE(B-&gt;<span class="params">d</span>·)</span> =&#123;B-&gt;d·&#125;</span><br><span class="line">I10=<span class="constructor">GO(I5, A)</span>=<span class="constructor">CLOSURE(A-&gt;<span class="params">cA</span>·)</span>=&#123;A-&gt;cA·&#125;</span><br><span class="line">    <span class="constructor">GO(I5, <span class="params">c</span>)</span>=<span class="constructor">CLOSURE(A-&gt;<span class="params">c</span>·A)</span>=I5# 前面已经求过闭包，不产生新状态，状态直接转换</span><br><span class="line">    <span class="constructor">GO(I5, <span class="params">d</span>)</span>=<span class="constructor">CLOSURE(A-&gt;<span class="params">d</span>·)</span> =I6# 前面已经求过闭包，不产生新状态，状态直接转换</span><br><span class="line">I11=<span class="constructor">GO(I8, B)</span>=<span class="constructor">CLOSURE(B-&gt;<span class="params">cB</span>·)</span>=&#123;B-&gt;cB·&#125;</span><br><span class="line">    <span class="constructor">GO(I8, <span class="params">c</span>)</span>=<span class="constructor">CLOSURE(B-&gt;<span class="params">c</span>·B)</span>=I8# 前面已经求过闭包，不产生新状态，状态直接转换</span><br><span class="line">    <span class="constructor">GO(I8, <span class="params">d</span>)</span>=<span class="constructor">CLOSURE(B-&gt;<span class="params">d</span>·)</span> =I9# 前面已经求过闭包，不产生新状态，状态直接转换</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;识别活前缀的DFA，如下图所示：  </p><p><img src= "/img/loading.gif" data-lazy-src="https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/blog_img/LR%280%29DFA%E6%9E%84%E9%80%A0.png">  </p><p>&emsp;&emsp;LR(0)分析表，如下所示：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">a</span>bcd#EAB</span><br><span class="line"><span class="attribute">0</span>S<span class="number">2</span>S<span class="number">3</span><span class="number">1</span></span><br><span class="line"><span class="attribute">1</span>acc</span><br><span class="line"><span class="attribute">2</span>S<span class="number">5</span>S<span class="number">6</span><span class="number">4</span></span><br><span class="line"><span class="attribute">3</span>S<span class="number">8</span>S<span class="number">9</span><span class="number">7</span></span><br><span class="line"><span class="attribute">4</span>r<span class="number">1</span>r<span class="number">1</span>r<span class="number">1</span>r<span class="number">1</span>r<span class="number">1</span></span><br><span class="line"><span class="attribute">5</span>S<span class="number">5</span>S<span class="number">6</span><span class="number">10</span></span><br><span class="line"><span class="attribute">6</span>r<span class="number">4</span>r<span class="number">4</span>r<span class="number">4</span>r<span class="number">4</span>r<span class="number">4</span></span><br><span class="line"><span class="attribute">7</span>r<span class="number">2</span>r<span class="number">2</span>r<span class="number">2</span>r<span class="number">2</span>r<span class="number">2</span></span><br><span class="line"><span class="attribute">8</span>S<span class="number">8</span>S<span class="number">9</span><span class="number">11</span></span><br><span class="line"><span class="attribute">9</span>r<span class="number">6</span>r<span class="number">6</span>r<span class="number">6</span>r<span class="number">6</span>r<span class="number">6</span></span><br><span class="line"><span class="attribute">10</span>r<span class="number">3</span>r<span class="number">3</span>r<span class="number">3</span>r<span class="number">3</span>r<span class="number">3</span></span><br><span class="line"><span class="attribute">11</span>r<span class="number">5</span>r<span class="number">5</span>r<span class="number">5</span>r<span class="number">5</span>r<span class="number">5</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;对输入串 bccd #的 LR(0) 分析过程：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">步骤状态栈符号栈输入串ACTIONGOTO</span><br><span class="line"><span class="number">1</span>  <span class="number">0</span>   # bccd#   S3</span><br><span class="line"><span class="number">2</span>  <span class="number">03</span>       #b ccd#   S8</span><br><span class="line"><span class="number">3</span>  <span class="number">038</span>   #bc     cd#   S8</span><br><span class="line"><span class="number">4</span>  <span class="number">0388</span>   #bcc     d#   S9</span><br><span class="line"><span class="number">5</span>  <span class="number">03889</span>   #bccd #   r6   <span class="number">11</span></span><br><span class="line"><span class="number">6</span>  <span class="number">0388</span>(<span class="number">11</span>) #bccB #   r5   <span class="number">11</span></span><br><span class="line"><span class="number">7</span>  <span class="number">038</span>(<span class="number">11</span>)  #bcB #   r5   <span class="number">7</span> </span><br><span class="line"><span class="number">8</span>  <span class="number">037</span>   #bB #   r2   <span class="number">1</span></span><br><span class="line"><span class="number">9</span>  <span class="number">01</span>   #E #   acc</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
          <category> LR分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LR分析 </tag>
            
            <tag> LR(0) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LR分析——LALR(1)分析器</title>
      <link href="2020/11/27/LR%E5%88%86%E6%9E%90%E2%80%94%E2%80%94LALR-1-%E5%88%86%E6%9E%90%E5%99%A8/"/>
      <url>2020/11/27/LR%E5%88%86%E6%9E%90%E2%80%94%E2%80%94LALR-1-%E5%88%86%E6%9E%90%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="LALR-1-分析"><a href="#LALR-1-分析" class="headerlink" title="LALR(1) 分析"></a>LALR(1) 分析</h2><p>&emsp;&emsp;LR(1) 分析表的构造对搜索符的计算方法比较确切，对文法放宽了要求，也就是适应的文法类广，可以解决 SLR(1) 方法解决不了的问题，但是，由于它的构造对某些同心集的分裂可能使状态数目引起剧烈的增长，从而导致存储容量的急剧增加，因此使应用一定的限制。为了克服 LR(1) 的这种缺点，可以采用对 LR(1) 项目集规范族合并同心集的方法，若合并同心集后不产生新的冲突，则为 LALR(1) 项目集，它的状态个数 LR(0)、SLR(1) 的相同。</p><p>&emsp;&emsp;同心集的例子：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">I3: B-&gt;a·B,a/bI6: B-&gt;a·B,<span class="comment">#</span></span><br><span class="line">    B-&gt;·aB,a/bB-&gt;·aB,<span class="comment">#</span></span><br><span class="line">    B-&gt;·b,a/bB-&gt;·b.<span class="comment">#</span></span><br><span class="line">I4: B-&gt;b·,a/bI7: B-&gt;b·,<span class="comment">#</span></span><br><span class="line">I8: B-&gt;aB·,a/bI9:B-&gt;aB·,<span class="comment">#</span></span><br><span class="line">即 I3 和 I6，I4 和 I7，I8 和 I9 分别为同心集，将同心集合并后为：</span><br><span class="line">I3,I6: B-&gt;a·B,a<span class="regexp">/b/</span><span class="comment">#</span></span><br><span class="line">   B-&gt;·aB,a<span class="regexp">/b/</span><span class="comment">#</span></span><br><span class="line">   B-&gt;·b,a<span class="regexp">/b/</span><span class="comment">#</span></span><br><span class="line">I6,I7: B-&gt;b·,a<span class="regexp">/b/</span><span class="comment">#</span></span><br><span class="line">I8,I9: B-&gt;aB·,a<span class="regexp">/b/</span><span class="comment">#</span></span><br><span class="line">同心集合并后仍不包含冲突，因此该文法满足 LALR(<span class="number">1</span>) 要求。</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;合并同心集有几个问题需要说明：</p><ol><li><strong>同心集是指心相同的项目集合在一起</strong>，因此同心集合并后心仍相同，只是超前搜索符集合为各同心集超前搜索符集合的合集。</li><li><strong>同心集经过经转换函数所达的项目集仍为同心集</strong>。因为相同的心转换函数所达的心仍相同，即仍属同心集，所以合并同心集后转换函数也自动合并。</li><li>若文法是 LR(1) 文法，合并同心集后，若有冲突也只可能是归约-归约冲突，而不可能是产生移进-归约冲突，不妨假设某 LR(1) 文法的项目集 <code>Ik</code> 与 <code>Ij</code> 为同心集，其中：</li></ol><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">Ik: [A-&gt;α·,μ1]</span></span><br><span class="line"><span class="xml">[B-&gt;β·aγ,b]</span></span><br><span class="line"><span class="xml">Ij: [A-&gt;α·,μ2]</span></span><br><span class="line"><span class="xml">[B-&gt;β·aγ,c]</span></span><br><span class="line"><span class="xml">其中，μ1、μ2分别为超前搜索符集合。因为假设文法是 LR(1) 的，所以不可能有移进-归约冲突，也就是在 Ik 中有</span><span class="template-variable">&#123;μ1&#125;</span><span class="xml">∩</span><span class="template-variable">&#123;a&#125;</span><span class="xml">=∅，在 Ij 中有 </span><span class="template-variable">&#123;μ2&#125;</span><span class="xml">∩</span><span class="template-variable">&#123;a&#125;</span><span class="xml">=∅，显然合并后同心集后 (</span><span class="template-variable">&#123;μ1&#125;</span><span class="xml">∪</span><span class="template-variable">&#123;μ2&#125;</span><span class="xml">)∩</span><span class="template-variable">&#123;a&#125;</span><span class="xml">=∅</span></span><br></pre></td></tr></table></figure><ol start="4"><li>合并同心集后对某些错误发现的时间会产生推迟现象，但错误的出现位置仍是准确的。这意味着 LALR(1) 分析表比 LR(1) 分析表对同一输入串分析可能会有多余归约。</li></ol><h4 id="LARLR-1-分析表构造过程"><a href="#LARLR-1-分析表构造过程" class="headerlink" title="LARLR(1) 分析表构造过程"></a>LARLR(1) 分析表构造过程</h4><p>&emsp;&emsp;对于一个文法是否为 LALR(1) 文法，通常所采用的方法是：构造它的 LR(1) 项目集族，若不含任何冲突，则合并同心集；若仍不产生归约-归约冲突，则该文法便是LALR(1) 文法，就可以根据合并同心集后的项目集族构造该文法的 LALR(1) 分析表。其构造步骤如下：</p><ol><li>构造文法 G 的 LR(1) 项目集族，<code>C = &#123;I0, I1, ..., In&#125;</code></li><li>合并所有的同心集，使 C 变为 <code>C’ = &#123;J0,J1, ..., Jm&#125;</code>，便是 LALR(1) 的项目集。</li><li>根据 C‘ 构造动作（ACTION）表，其方法与 LR(1) 分析表的构造相同。<ol><li>若 <code>[A-&gt;α·aβ,b] ∈ Jk</code>，且 <code>GO(Jk, a)=Jj</code>，其中 a∈V<del>T</del>，则置 ACTION[k, a] = Sj，其含义是把输入符号 a 和状态 j 分别移入文法符号栈和状态栈。</li><li>若项目 <code>[A-&gt;α·,a] ∈ Jk</code>，且置 ACTION[k, a] = rj，其中 a∈V<del>T</del>，rj的含义是 A-&gt;α 是文法的第 j 个产生式，此时把栈顶符号串 α 归约为 A。</li><li>若项目 <code>[S&#39;-&gt;S·,#] ∈ Jk </code>，且置 ACTION[k, #] = acc，表示分析成功、接受。</li><li>GOTO 表的构造。对于不是同心集的项目集，转换函数的构造与 LR(1) 的相同，对同心集项目，由于合并同心集后，新集的转换函数也为同心集。所以当 X 为非终结符时，<code>GO(Jk,X)=Ji</code>，则置 GOTO[k, X]=i，表示在 k 状态下遇非终结符 X 时，把 X 和 i 分别移到文法符号栈和状态栈；当 X 为终结符时和 ACTION 表重合。</li><li>分析表中凡不能用 1~4 填入信息的均填错标志。</li></ol></li></ol><h4 id="LALR-1-限定要求"><a href="#LALR-1-限定要求" class="headerlink" title="LALR(1) 限定要求"></a>LALR(1) 限定要求</h4><p>&emsp;&emsp;由于合并同心集后，在新的集合中不含归约-归约冲突，所以该文法是 LALR(1) 文法。能用 LALR(1) 分析表进行语法分析的分析器称为 LALR(1) 分析器。</p><h4 id="LALR-1-例子"><a href="#LALR-1-例子" class="headerlink" title="LALR(1) 例子"></a>LALR(1) 例子</h4><p>&emsp;&emsp;文法的定义如下：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.</span> S&#x27;-&gt;S</span><br><span class="line"><span class="number">1.</span> S-&gt;L=R</span><br><span class="line"><span class="number">2.</span> S-&gt;R</span><br><span class="line"><span class="number">3.</span> L-&gt;*R</span><br><span class="line"><span class="number">4.</span> L-&gt;i</span><br><span class="line"><span class="number">5.</span> R-&gt;L</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;该文法的项目有：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> S&#x27;-&gt;·S<span class="number">9.</span> L-&gt;·*R</span><br><span class="line"><span class="number">2.</span> S&#x27;-&gt;S·<span class="number">10.</span> L-&gt;*·R</span><br><span class="line"><span class="number">3.</span> S-&gt;·L=R<span class="number">11.</span> L-&gt;*R·</span><br><span class="line"><span class="number">4.</span> S-&gt;L·=R<span class="number">12.</span> L-&gt;·i</span><br><span class="line"><span class="number">5.</span> S-&gt;L=·R<span class="number">13.</span> L-&gt;i·</span><br><span class="line"><span class="number">6.</span> S-&gt;L=R·<span class="number">14.</span> R-&gt;·L</span><br><span class="line"><span class="number">7.</span> S-&gt;·R<span class="number">15.</span> R-&gt;L·</span><br><span class="line"><span class="number">8.</span> S-&gt;R·</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;求闭包算法：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">初始状态I0：S&#x27;-&gt;·S,#  S-&gt;·L=R,#  S-&gt;·R,#  L-&gt;·*R,=/#  L-&gt;·i,=/#  R-&gt;·L,#</span><br><span class="line">I1 =GO(I0, S)=CLOSURE(S&#x27;-&gt;S·,#)</span><br><span class="line">  =&#123;S&#x27;-&gt;S·,#&#125;</span><br><span class="line">I2 =GO(I0, L)=CLOSURE(S-&gt;L·=R,#  R-&gt;L·,#)</span><br><span class="line"> =&#123;S-&gt;L·=R,#R-&gt;L·,#&#125;</span><br><span class="line">I3 =GO(I0, R)=CLOSURE(S-&gt;R·,#)</span><br><span class="line"> =&#123;S-&gt;R·,#&#125;</span><br><span class="line">I4 =GO(I0, *)=CLOSURE(L-&gt;*·R,=/#)</span><br><span class="line"> =&#123;L-&gt;*·R,=/#  R-&gt;·L,=/#  L-&gt;·*R,=/#  L-&gt;·i,=/#&#125;</span><br><span class="line">I5 =GO(I0, i)=CLOSURE(L-&gt;i·,=/#)</span><br><span class="line"> =&#123;L-&gt;i·,=/#&#125;</span><br><span class="line">I6 =GO(I2, =)=CLOSURE(S-&gt;L=·R,#)</span><br><span class="line"> =&#123;S-&gt;L=·R,#  R-&gt;·L,#  L-&gt;·*R,#  L-&gt;·i,#&#125;</span><br><span class="line">I7 =GO(I4, R)=CLOSURE(L-&gt;*R·,=/#)</span><br><span class="line"> =&#123;L-&gt;*R,=/#&#125;</span><br><span class="line">I8 =GO(I4, L)=CLOSURE(R-&gt;L·,=/#)</span><br><span class="line"> =&#123;R-&gt;L·,=/#&#125;</span><br><span class="line">GO(I4, *)=CLOSURE(L-&gt;*·R,=/#)=I4#前面已经求过必过,不产生新状态,状态直接转换</span><br><span class="line">    Go(I4, i)=CLOSURE(L-&gt;i·,=/#)=I5#前面已经求过必过,不产生新状态,状态直接转换</span><br><span class="line">I9 =G0(I6, R)=CLOSURE(S-&gt;L=R·,#)</span><br><span class="line"> =&#123;S-&gt;L=R·,#&#125;</span><br><span class="line">I10=GO(I6, L)=CLOSURE(R-&gt;L·,#)</span><br><span class="line">    =&#123;R-&gt;L·,#&#125;</span><br><span class="line">I11=GO(I6, *)=CLOSURE(L-&gt;*·R,#)</span><br><span class="line"> =&#123;L-&gt;*·R,#  R-&gt;·L,#  L-&gt;·*R,#  L-&gt;·i,#&#125;</span><br><span class="line">I12=GO(I6, i)=CLOSURE(L-&gt;i,#)</span><br><span class="line"> =&#123;L-&gt;i·,#&#125;</span><br><span class="line">I13=GO(I11,R)=CLOSURE(L-&gt;*R·,#)</span><br><span class="line"> =&#123;L-&gt;*R·,#&#125;</span><br><span class="line">GO(I11,L)=CLOSURE(R-&gt;L·,#)=I10#前面已经求过必过,不产生新状态,状态直接转换GO(I11,*)=CLOSURE(L-&gt;*-R,#)=I11#前面已经求过必过,不产生新状态,状态直接转换Go(I11,i)=CLOSURE(L-&gt;i·,#)=I12#前面已经求过必过,不产生新状态,状态直接转换</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;识别活前缀的DFA，如下图所示：</p><p><img src= "/img/loading.gif" data-lazy-src="https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/blog_img/LALR%281%29%E5%88%86%E6%9E%90%E5%99%A8.png" alt="image-20200514203900146"></p><p>&emsp;&emsp;合并同心集后的项目集分别如下：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">I4 和 I11 为</span><br><span class="line">&#123;L-&gt;*·R,=/#</span><br><span class="line"> R-&gt;·L,=/#</span><br><span class="line"> L-&gt;·*R,=/#</span><br><span class="line"> L-&gt;·i,=/#&#125;</span><br><span class="line">I5 和 I12 为</span><br><span class="line">&#123;L-&gt;i·,=/#&#125;</span><br><span class="line">I7 和 I13 为</span><br><span class="line">&#123;L-&gt;*R,=/#&#125;</span><br><span class="line">I8 和 I10 为</span><br><span class="line">&#123;R-&gt;L·,=/#&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;相应的 LALR(1) 分析表如下所示：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">=*i#SLR</span><br><span class="line"><span class="number">0</span><span class="built_in">S4</span><span class="built_in">S5</span><span class="number">1</span><span class="number">2</span><span class="number">3</span></span><br><span class="line"><span class="number">1</span>acc</span><br><span class="line"><span class="number">2</span><span class="built_in">S6</span></span><br><span class="line"><span class="number">3</span><span class="built_in">r2</span></span><br><span class="line"><span class="number">4</span>,<span class="number">11</span><span class="built_in">S4</span>,<span class="number">11</span><span class="built_in">S5</span>,<span class="number">12</span><span class="number">7</span>,<span class="number">13</span><span class="number">8</span>,<span class="number">10</span></span><br><span class="line"><span class="number">5</span>,<span class="number">12</span><span class="built_in">r4</span><span class="built_in">r4</span></span><br><span class="line"><span class="number">6</span><span class="built_in">S4</span>,<span class="number">11</span><span class="built_in">S5</span>,<span class="number">12</span><span class="number">8</span>,<span class="number">10</span><span class="number">9</span></span><br><span class="line"><span class="number">7</span>,<span class="number">13</span><span class="built_in">r3</span><span class="built_in">r3</span></span><br><span class="line"><span class="number">8</span>,<span class="number">10</span><span class="built_in">r5</span><span class="built_in">r5</span></span><br><span class="line"><span class="number">9</span><span class="built_in">r1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
          <category> LR分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LR分析 </tag>
            
            <tag> LALR(1) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中MVCC与事务的四种隔离级别</title>
      <link href="2020/11/27/MySQL%E4%B8%ADMVCC%E4%B8%8E%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9B%9B%E7%A7%8D%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
      <url>2020/11/27/MySQL%E4%B8%ADMVCC%E4%B8%8E%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9B%9B%E7%A7%8D%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>&emsp;&emsp;事务，就是一组原子性的操作，一个独立的工作单元。如果事务中有一条语句执行失败，那么事务内的所有语句都会失败，也就是事务将会回滚。  </p><p>&emsp;&emsp;事务具备以下特性：</p><ol><li><strong>原子性</strong>（atomicity）</li><li><strong>一致性</strong>（consistency）</li><li><strong>隔离性</strong>（ioslation）</li><li><strong>持久性</strong>（durability）</li></ol><h4 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h4><p>&emsp;&emsp;一个事务必须被视为一个不可分割的最小工作单元。整个事务中的所有操作要么全部提交成功，要么全部失败回滚，对于一个事务来说，不可能只执行其中的一部分操作。  </p><h4 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h4><p>&emsp;&emsp;数据库总是从一个一致性的状态转换到另外一个一致性状态。如果在一次事务中转账失败，那么数据将不会保存到数据库中，会恢复到之前的数据状态。</p><h4 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a>隔离性</h4><p>&emsp;&emsp;一个事务所做的修改在最终提交的时候，对其他的事务是不可见的。</p><h4 id="持久性"><a href="#持久性" class="headerlink" title="持久性"></a>持久性</h4><p>&emsp;&emsp;一旦事务提交，则其所做的修改就会永久保存到数据库中。此时即使系统崩溃，修改的数据也不会丢失。这个要取决于数据的修改有没有被保存到binlog（二进制日志）中，这个不一定真正的持久，可以利用备份、或者复制达到更稳定的持久。  </p><hr><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><ul><li><strong>READ UNCOMMITED</strong>（未提交读）  </li></ul><p>&emsp;&emsp;在READ UNCOMMITED级别，事务中的修改，即使没有提交，对其它事务也都是可见的。其它事务可以读取到未提交的数据，这也被称为（Dirty Read）<strong>脏读</strong>。  </p><ul><li><strong>READ COMMITED</strong>（提交读）</li></ul><p>&emsp;&emsp;大多数的数据库默认隔离级别都是READ COMMITED（例如，Oracle），MySQL不是。一个事务从开始直到提交之前，所做的任何修改对其他事务都是不可见的。这个级别有时候也被叫做不可重复读，因为两次执行同样的查询，可能会得到不一样的结果。  </p><ul><li><strong>REPEATABLE READ</strong>（可重复读）</li></ul><p>&emsp;&emsp;REPEATABLE READ可以解决脏读问题。该级别保证了在同一个事务中多次读取同样的数据结果都是一致的，但是存在幻读的问题。MySQL中InnoDB存储引擎的MVCC控制，解决了幻读问题。</p><blockquote><p><strong>幻读</strong>：指的是当某个事务在读取某个范围内的记录时，另外一个事务又在该范围内插入了新的记录，当之前的事务再次读取该范围的记录时，会产生环行。</p></blockquote><ul><li><strong>SERIALIZABLE</strong>（可串行化）</li></ul><p>&emsp;&emsp;SERIALIZABLE是最高的隔离级别。这一级别会给读取的每一行数据都加上锁，存在超时和死锁问题。</p><hr><h2 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h2><p>&emsp;&emsp;MVCC（Multiversion Concurrency Control）多版本并发控制，MVCC的实现，是通过保存数据在某个时间点的快照来实现的。  </p><p>&emsp;&emsp;InnoDB的MVCC，是通过每行记录后面保存两个隐藏的列来实现的。这两个列的内容为：①保存了行的<strong>创建时间</strong>。②保存行的<strong>过期时间（或删除时间）</strong>，存储的不是实际的时间值，而是系统版本号（system version number）。每开始一个新的事务，系统版本号都会自动递增。事务开始时刻的系统版本号会作为事务的版本号，用来和查询到的每行记录进行比较。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SElECT</span></span><br><span class="line">    <span class="keyword">InnoDB</span>会根据一下的两个条件检查每行记录：</span><br><span class="line">        a.InnoDB只查找版体早于当前事务版本的数据行（也就是，行的系统版本号小于或等于事务的系统版本号），这样可以确保事务读取的行，要么是在事务开始前已经存在的，要么是事务自身插入或者修改过的。</span><br><span class="line">        b.行的删除版本要么未定义，要么大于当前事务版本号。这可以确保事务读取到的行，在事务开始之前未被删除。</span><br><span class="line">    只有符合上述两个条件的记录，才能返回作为查询结果。</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span></span><br><span class="line">    <span class="keyword">InnoDB</span>为新插入的每一行保存当前系统版本号作为行版本号。</span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span></span><br><span class="line">    <span class="keyword">InnoDB</span>为删除的每一行保存当前系统版本号作为行删除标识。</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span></span><br><span class="line">    <span class="keyword">InnoDB</span>为插入一行新记录，保存当前系统版本号作为行版本号，同时保存当前系统版本号到原来的行作为行删除标识。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> 原理介绍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVCC </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类加载过程&amp;双亲委派模型</title>
      <link href="2020/11/27/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B-%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B/"/>
      <url>2020/11/27/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B-%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><ul><li>类加载过程</li><li>类加载器</li><li>双亲委派模型</li></ul><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;最近深入理解虚拟机出了第三版（最新版），同时自己也是回顾了一下关于类加载这块知识点，由于当时看第一遍的时候，其中大部分都是似懂非懂，例如：synchronized实现的原理，锁的原理，通过后面的实践以及学习相关的知识，有了一些认识后，然后借助这个时机，重新回顾一下jvm相关知识，有了新的收获。</p><h2 id="概念区分"><a href="#概念区分" class="headerlink" title="概念区分"></a>概念区分</h2><p>&emsp;&emsp;先区分一下<strong>类加载过程</strong>和<strong>类加器</strong>的区别：</p><blockquote><p><strong>类加载过程</strong>：是由一系列动作组成，例如：加载、验证、准备、解析、初始化</p></blockquote><blockquote><p><strong>类加载器</strong>：指完成类加载过程的一个实例</p></blockquote><p>&emsp;&emsp;一个类的生命周期为：加载-&gt;验证-&gt;准备-&gt;解析-&gt;初始化-&gt;使用-&gt;卸载。</p><ul><li><font color='red'>类变量</font>：指的是被static修饰</li><li><font color='red'>实例变量</font>：指的是通过该类的对象（实例）去访问的变量</li></ul><hr><h2 id="类加载时机"><a href="#类加载时机" class="headerlink" title="类加载时机"></a>类加载时机</h2><ol><li>使用new创建对象时候；</li><li>访问或者修改类变量（<strong>static修饰</strong>的，<strong>不包括被final修饰</strong>的，因为被final修饰的会被放在常量池中）；</li><li>调用静态方法；</li><li>使用反射reflect时候；</li><li>初始化一个类的时候，如果父类没有被加载，那么首先应该加载该父类；</li><li>JDK8中引入接口的默认方法（default关键字），如果有一个类实现这种接口（带有default关键字），那么首先应该加载该接口。</li></ol><hr><h2 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h2><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p>&emsp;&emsp;类加载过程中的第一个阶段，主要完成三件事情：</p><ol><li>通过一个类的全限定类名加载class字节码流</li><li>将类的静态存储结构转换为运行时数据结构</li><li>生成一个 <code>java.lang.Class</code> 对象，作为之后这个类的各种数据访问入口</li></ol><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>&emsp;&emsp;校验加载进来的class字节码流是否合法，主要校验以下几个方面：</p><ul><li>文件格式验证，文件头、版本号是否在当前虚拟机接受范围内…</li><li>元数据验证，主要进行进行的是语义分析。该类是否继承父类？父类是否是一个final修饰的类？</li><li>字节码验证，校验数据是否合法（类型、类型转换上）</li><li>符号引用验证</li></ul><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>&emsp;&emsp;该阶段主要是，将类变量分配初始化空间，注意以下几个方面问题：</p><ul><li><strong>此时没有按照程序意图赋值，仅仅是赋一个初始值</strong>；</li><li><strong>如果是被 <code>static final</code> 修饰的变量，直接赋初始值</strong>；因为会在常量池中直接分配，作为一个常量。</li></ul><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>&emsp;&emsp;解析阶段，是将虚拟机将常量池内的符号引用替换为直接引用的过程：</p><ul><li><strong>符号引用</strong>：是指一组用来描述所引用的目标，符号可以是任何形式的字面量，只要能无歧义定位到目标，也就是通过这个引用可以直接访问到目标，但是没有实际意义的；</li><li><strong>直接引用</strong>：是指可以访问到目标的指针，偏移量，或者可以间接访问到对象的一个句柄；</li></ul><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>&emsp;&emsp;初始化阶段，指的是执行 <code>&lt;clinit&gt;</code> 方法，类构造器的方法，注意与 <code>&lt;init&gt;</code> 方法区分；</p><ul><li><code>&lt;clinit&gt;</code>：由编译器自动收集所有类变量的赋值动作和语句块 <code>static&#123;&#125;</code> 合并产生的；</li><li><code>&lt;init&gt;</code>：类中按照程序员意图定义为构造器方法</li></ul><hr><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>&emsp;&emsp;类加载器，指的是完成上述类加载过程这一系列动作的；</p><p>&emsp;&emsp;判断两个类的实例是否相等，首先要判断两个类是否由同一个类加载器加载，如果不是，则两个对象虽然同属于一个类的实例并且字段也相等，但是两个对象是不相等的。</p><hr><h2 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h2><p>&emsp;&emsp;首先，来看一下双亲委派模型图：</p><p><img src= "/img/loading.gif" data-lazy-src="https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/blog_img/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%A8%A1%E5%9E%8B.png"></p><ul><li>启动类加载器（Boostrap Class Loader）：负责加载 <code>&lt;JAVA_HOME&gt;\lib</code> 目录下的类</li><li>扩展类加载器（Extension Class Loader）：负责加载 <code>&lt;JAVA_HOME&gt;\lib\ext</code> 目录下的类</li><li>应用程序类加载器（Application Class Loader）：负责加载 <code>&lt;classpath&gt;</code> 用户类路径下的类</li></ul><h3 id="工作过程"><a href="#工作过程" class="headerlink" title="工作过程"></a>工作过程</h3><p>&emsp;&emsp;如果一个类加器收到了类加载请求，首先它自己本身不会加载该类，而是将该类交由给父类加载器去处理加载，如果父类无法处理该加载请求，那么子类加载器才会尝试进行加载该类。</p><h3 id="额外"><a href="#额外" class="headerlink" title="额外"></a>额外</h3><p>&emsp;&emsp;一个类只能被加载一次，这一点很关键，也是单例模式实现方式之一的来源，让我们看一下源码如何定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line"><span class="keyword">return</span> loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)</span><br><span class="line">       <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="comment">// 加锁，保证同一个类只能被加载一次的关键</span></span><br><span class="line">       <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">           <span class="comment">// 检查该类是否已经被加载过了，防止重复加载同一个类</span></span><br><span class="line">           Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">           <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">long</span> t0 = System.nanoTime();</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                       <span class="comment">// 双亲委派模型，交由给父类去加载</span></span><br><span class="line">                       c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       <span class="comment">// 如果父类不能加载该类，那么自己尝试去加载该类</span></span><br><span class="line">                       c = findBootstrapClassOrNull(name);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                   <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                   <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                   <span class="comment">// to find the class.</span></span><br><span class="line">                   <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">                   c = findClass(name);</span><br><span class="line"></span><br><span class="line">                   <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                   PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                   PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                   PerfCounter.getFindClasses().increment();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">               resolveClass(c);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> c;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
          <category> 类加载篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类加载 </tag>
            
            <tag> 双亲委派模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis概述以及数据结构篇</title>
      <link href="2020/11/27/Redis%E6%A6%82%E8%BF%B0%E4%BB%A5%E5%8F%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/"/>
      <url>2020/11/27/Redis%E6%A6%82%E8%BF%B0%E4%BB%A5%E5%8F%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>&emsp;&emsp;Redis 是近期一款非常热门的 NoSQL 型数据库，它具有以下特点：</p><ul><li>基于内存，响应速度非常快；</li><li>单线程架构（可保证请求的顺序性，以及防止并发操作）；</li><li>采用 IO多路复用（select、poll、epoll） 处理套接字连接，将套接字都放入一个队列中；</li><li>采用文件事件分派器，根据套接字当前产生的事件调用响应的事件处理器；</li><li>支持数据的持久化，具有 RDB、AOF 两种方式；</li><li>主从复制，支持一主多从拓扑结构；</li><li>高可用、分布式，sentinel哨兵监控可以保证高可用行；采用分槽机制实现集群。</li></ul><p>&emsp;&emsp;Redis有 <strong>五种</strong> 基本数据结构，以及 <strong>三种</strong> 扩展的数据结构，本文将依次介绍各个数据结构的特点，以及一些基本用法和对应的使用场景。</p><ol><li>字符串</li><li>哈希</li><li>列表</li><li>集合</li><li>有序集合</li><li>bitMaps</li><li>HyperLogLog</li><li>geo</li></ol><p>&emsp;&emsp;高级用法，将在后面文章讨论。</p><ul><li>pub/sub，发布/订阅模式</li><li>pipeline，管道机制，将多个命令封装一次请求，然后顺序返回相应的操作结果，增大了网络的吞吐量，但是减少了网络IO次数。</li><li>lua脚本，将业务封装到脚本，然后依据 Redis 单线程架构模型，一次性执行脚本内容，可以达到原子性，有效地解决一些并发场景。</li><li>事务，采用 watch、multi、exec 命令来操作，可以像关系型数据库那样操作事务，但是没有那么完善。内部使用乐观锁的机制来执行，有效地解决了ABA问题（通过链表来连接，若key在事务执行期间发生改变，通过标志位 REDIS_DIRTY_CAS 表示，表示是否事务的安全性被破坏）</li></ul><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>&emsp;&emsp;字符串类型，是Redis中最基础的数据结构。字符串类型的值实际上可以由 <strong>JSON</strong>、<strong>普通文本串</strong>、<strong>数字</strong>、<strong>二进制文件</strong>，最大值不超过 512MB。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/blog_img/Redis%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%93%E6%9E%84%E5%9B%BE.png"></p><h3 id="底层实现原理"><a href="#底层实现原理" class="headerlink" title="底层实现原理"></a>底层实现原理</h3><p>&emsp;&emsp;底层使用 SDS（Simple Dynamic String）实现，使用 SDS 可以有效避免未及时分配内存区域而导致的覆盖行为，更多有关 SDS 具体细节，将在之后的文章讨论。  </p><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p>&emsp;&emsp;set 命令可以有多个选项：set key value [ex seconds] [px milliseconds] [nx|xx]</p><ul><li>ex seconds：为键设置秒级过期时间</li><li>px milliseconds：为键设置毫秒级过期时间</li><li>nx：键必须不存在，才可以设置成功，用于添加</li><li>xx：与 nx 相反，键必须存在，才可以设置成功，用户更新</li></ul><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><h4 id="缓存功能"><a href="#缓存功能" class="headerlink" title="缓存功能"></a>缓存功能</h4><p>&emsp;&emsp;最经典的场景之一，使用 MySQL 作为存储层，Redis 作为缓存层，MySQL 大部分请求的数据都是从 Redis 中获取。由于 Redis 具有支撑高并发的特性，所以缓存能起到加速读写和降低后端压力的作用。</p><blockquote><p>常见的设计键名的方法：业务名称:对象名: id[:属性]，可以不使用冒号，使用下划线隔开也可以。</p></blockquote><ul><li>注意事项：使用缓冲时，应注意<strong>缓存一致性</strong>问题，也就是先更新缓存还是DB问题。<ul><li>如果先更新缓存，然后更新DB失败，下一个读请求读到的数据就是未曾更新到DB的数据，这样的数据明显有问题，建议先更新DB，然后在选择操作缓存层。</li><li>如果采用先淘汰缓存，然后更新DB操作，如果在DB更新完成之前，来了一个新的读的请求，那么就会查询出数据库旧的数据，缓存到Redis，导致DB更新完成之后，两者数据不一致。</li><li>如果先更新DB，然后操作缓存失败，客户端读取的是旧数据，但是实际业务还是以DB数据为准，这种读到的未更新到DB的数据影响较小，可以采用重试机制更新缓存层，或者使用异步机制来进行。</li></ul></li></ul><h4 id="共享session"><a href="#共享session" class="headerlink" title="共享session"></a>共享session</h4><p>&emsp;&emsp;现在的服务器架构大部分分布式服务，用户的请求可以在不同的服务器上进行处理，用户的会话状态就不一致的问题。</p><p>&emsp;&emsp;解决这一问题的方案，可以使用Redis进行用户session的统一管理，每次用户更新或者用户用户登录状态信息，可以去 Redis 中获取。</p><h4 id="限速"><a href="#限速" class="headerlink" title="限速"></a>限速</h4><p>&emsp;&emsp;限制用户恶意频繁地调用接口，可以采用一个带有过期时间的key，如果下一次请求该key存在，那么不进行后续的业务处理。</p><hr><h2 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h2><p>&emsp;&emsp;在 Redis 中，哈希是指键值本身又是一个键值对结构，形如 value = <code>&#123;&#123;field, value&#125;, ... &#123;fieldN, valueN&#125;&#125;</code>，哈希的结构关系可以用下图来表示：  </p><p><img src= "/img/loading.gif" data-lazy-src="https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/blog_img/Redis%E5%93%88%E5%B8%8C%E7%BB%93%E6%9E%84.png"></p><h3 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h3><p>&emsp;&emsp;内部实现方式有两种：</p><ul><li><strong>ziplist</strong>（压缩列表）：当哈希类型元素个数 hash-max-ziplist-entries 小于配置（默认512），同时所有值都小于 hash-max-ziplist-value 配置（默认64字节）时，Redis 会使用 ziplist 作为 hash 的内部实现。</li><li><strong>hashtable</strong>（哈希表）：当无法满足 ziplist 的条件时，会使用 hashtable 作为底层实现，读写效率为 O(1)。</li></ul><h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><h4 id="缓存用户数据"><a href="#缓存用户数据" class="headerlink" title="缓存用户数据"></a>缓存用户数据</h4><p>&emsp;&emsp;field 为字段名称，value 为字段属性，但是采用 哈希 存储用户数据，模拟关系型数据库复杂查询有点难度。</p><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>&emsp;&emsp;列表是一种可以有序存储字符串的数据结构，最多存储 2^31^-1 个元素，并且非常灵活，可以充当队列、栈来使用，下图为相应的数据结构，下标都是从0开始：</p><p><img src= "/img/loading.gif" data-lazy-src="https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/blog_img/Redis%E5%88%97%E8%A1%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png"></p><p>&emsp;&emsp;列表具有以下两个特点：</p><ul><li>有序：可以保证插入有序，可以采用下标来获取元素、删除元素（下标从0开始）</li><li>具有重复元素</li></ul><h3 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h3><p>&emsp;&emsp;底层实现方式有两种：</p><ul><li><strong>ziplist</strong>（压缩列表）：限制条件与哈希那个类似，只不过改为 list-max-ziplist-entries。</li><li><strong>LinkedList</strong>（链表）</li></ul><h3 id="使用场景-2"><a href="#使用场景-2" class="headerlink" title="使用场景"></a>使用场景</h3><h4 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h4><p>&emsp;&emsp;使用 lpush+brpop 命令组合计科实现阻塞队列，生产者采用 lpush 命令生产消息，多个消费者采用 brpop 阻塞获取消息，这种消息队列容易将消息丢失，无法保证消息正确被消费，如果需要保证消费消息的正确性，使用专业的消息队列中间件（RabbitMQ、RocketMQ等）</p><blockquote><p>用列表实现多个数据结构：</p><ul><li>lpush+lpop=Stack（栈）</li><li>lpush+rpop=Queue（队列）</li><li>lpush+ltrim=Capped Collection（有限集合）</li><li>lpush+brpop=Message Queue（消息队列）</li></ul></blockquote><hr><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>&emsp;&emsp;集合也是用来存储多个字符串类型的数据结构，但是与列表不同的地方在于<strong>无序</strong>以及<strong>不允许有重复元素</strong>，支持集合之间的运算（并交补差），相应的数据结构图如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/blog_img/Redis%E9%9B%86%E5%90%88%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png"></p><h3 id="底层实现-1"><a href="#底层实现-1" class="headerlink" title="底层实现"></a>底层实现</h3><p>&emsp;&emsp;底层实现有两种方式。</p><ul><li><strong>intset</strong>（整数集合）：当集合中元素个数小于 set-max-intset-entries 配置（默认512）时，采用inset来存储。</li><li><strong>hashtable</strong>（哈希表）：当不满足 inset 条件时，转换为 hashtable 来存储。</li></ul><h3 id="使用场景-3"><a href="#使用场景-3" class="headerlink" title="使用场景"></a>使用场景</h3><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>&emsp;&emsp;可以将用户的标签作为一个set集合进行存储，然后将两个用户标签集合进行运算，得出共同喜好的标签内容。</p><blockquote><p>sadd = Tagging 标签</p><p>spop/srandommember = Random item 随机数 抽奖</p></blockquote><hr><h2 id="有序集合"><a href="#有序集合" class="headerlink" title="有序集合"></a>有序集合</h2><p>&emsp;&emsp;有序集合保留了集合的特点，不允许重复元素，并且可以给每一个元素分配一个score，可以根据score排序，相应的数据结构图为：</p><p><img src= "/img/loading.gif" data-lazy-src="https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/blog_img/Redis%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png"></p><ul><li><strong>注意</strong>：允许分数出现相同，但是不允许元素重复。</li></ul><h3 id="底层实现-2"><a href="#底层实现-2" class="headerlink" title="底层实现"></a>底层实现</h3><p>&emsp;&emsp;底层实现有两种方式：</p><ul><li><strong>ziplist</strong>（压缩列表）：当有序集合中元素个数小于 zset-max-ziplist-entries 配置（默认128个），并每个元素的值小于 zset-max-ziplist-value 配置（默认64字节），Redis 底层使用ziplist来存储。</li><li><strong>skiplist</strong>（跳跃表）：一种用空间换取时间复杂度，最优 O(logn)，最差 O(n)。</li></ul><h3 id="使用场景-4"><a href="#使用场景-4" class="headerlink" title="使用场景"></a>使用场景</h3><h4 id="排行榜系统"><a href="#排行榜系统" class="headerlink" title="排行榜系统"></a>排行榜系统</h4><p>&emsp;&emsp;用户获得一个赞，将对应的score增加一。</p><p>&emsp;&emsp;获取排行榜前几个元素，zrevrangebyrank key start end</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
          <category> 概述篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis底层数据结构——SDS原理剖析</title>
      <link href="2020/11/27/Redis%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94SDS%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/"/>
      <url>2020/11/27/Redis%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94SDS%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="简单动态字符串"><a href="#简单动态字符串" class="headerlink" title="简单动态字符串"></a>简单动态字符串</h2><p>&emsp;&emsp;Redis底层并没有使用 C 语言的字符串来实现，而是使用了 SDS 作为Redis的默认字符串实现。</p><ul><li>如果Redis的键 Key 是一个字符串对象，那么底层使用的是 SDS 来实现。</li><li>如果Redis的值 Value 是一个字符串对象，那么底层也是使用的是 SDS 来实现。</li></ul><p>&emsp;&emsp;SDS 除了可以实现 Redis 的键值表示形式，还可以作为 AOF 模块中缓冲区、客户端的输入缓冲区。</p><hr><h2 id="SDS-定义"><a href="#SDS-定义" class="headerlink" title="SDS 定义"></a>SDS 定义</h2><h3 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h3><p>&emsp;&emsp;在 C 语言中定义的结构体如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 保存字符串对象的结构</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sdshdr</span> &#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// buf 中已占用空间的长度</span></span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// buf 中剩余可用空间的长度</span></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">free</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据空间</span></span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="SDS结构示意图"><a href="#SDS结构示意图" class="headerlink" title="SDS结构示意图"></a>SDS结构示意图</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/blog_img/SDS%E7%A4%BA%E4%BE%8B%E5%9B%BE1.png"></p><ul><li><strong>free</strong>：代表缓冲区中剩余可以利用空间大小’’；</li><li><strong>len</strong>：缓冲区中实际使用长度</li><li><strong>buf</strong>：数据缓冲区，保存数据</li></ul><h3 id="SDS与C字符串区别"><a href="#SDS与C字符串区别" class="headerlink" title="SDS与C字符串区别"></a>SDS与C字符串区别</h3><p>&emsp;&emsp;C字符串长度为 N + 1，并且最后一个字符总是<code>&#39;\0&#39;</code>表示达到字符串尾部。</p><h3 id="获取数组长度"><a href="#获取数组长度" class="headerlink" title="获取数组长度"></a>获取数组长度</h3><ul><li>C字符串需要遍历一次数组，直到遇到 <code>&#39;\0&#39;</code>，时间复杂度为 O(n)</li><li>SDS只需要直接返回 len 长度，时间复杂度为 O(1)，因为 len 记录的就是当前数组实际使用的长度</li></ul><h3 id="杜绝缓冲区溢出"><a href="#杜绝缓冲区溢出" class="headerlink" title="杜绝缓冲区溢出"></a>杜绝缓冲区溢出</h3><p>&emsp;&emsp;C 字符串在内存上是连续的，例如下图所示：</p><p><img src= "/img/loading.gif" data-lazy-src="https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/blog_img/C%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%89%A9%E5%B1%95%E5%89%8D.png"></p><p>&emsp;&emsp;然后，现在对 <code>hello</code> 这一字符串进行扩展 <code>strcat(s1, &quot; world&quot;)</code>，改为 <code>hello world</code>，但是在扩展前忘记分配足够的内存空间，那么就会发生缓冲区溢出，如图所示：</p><p>  <img src= "/img/loading.gif" data-lazy-src="https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/blog_img/C%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%89%A9%E5%B1%95%E5%90%8E.png"></p><p>&emsp;&emsp;原先 s2 字符串 <code>redis</code> 将被 <code>world</code> 直接覆盖。</p><p>&emsp;&emsp;SDS 则是杜绝了这种情况的发生，在对 SDS 进行修改的时候，会先进行检查对应的 free 是否满足本次扩展需求，如果不满足，则先进行扩展，扩展规则之后会介绍。然后对扩展之后的 SDS，将新添加进来的字符串直接复制到后面，最后更新相关属性值 <code>free</code> 和 <code>len</code>，以及添加新的结尾符号 <code>\0</code>。</p><h3 id="内存重分配"><a href="#内存重分配" class="headerlink" title="内存重分配"></a>内存重分配</h3><p>&emsp;&emsp;C 字符串在程序执行 append 操作时，需要通过内存重分配来扩展底层数组的空间大小，如果没有进行的话，可能会发生内存溢出。</p><p>&emsp;&emsp;C 字符串在程序执行 trim 操作（截断）时，需要通过内存重分配将不使用的内存释放掉，如果忘记进行，可能会出现内存泄露。</p><p>&emsp;&emsp;在 Redis 为了减少内存重分配次数，使用未使用额外空间来减少次数，对于<strong>未使用空间</strong>，SDS有两种策略，<strong>空间预分配和惰性释放</strong>。</p><h4 id="空间预分配"><a href="#空间预分配" class="headerlink" title="空间预分配"></a>空间预分配</h4><p>&emsp;&emsp;SDS 在每一次扩展字符串时候，首先需要判断剩余空间是否满足本次分配要求，如果满足，则将字符串添加到原来的后部；否则，需要进行预空间分配，分配的规则如下：</p><ol><li>如果此时的 len + 待添加字符串 总长度小于 1MB，那么分配 <code>(len + addLen) * 2</code>长度，并且使用一个额外空间来保存空字符。例如，此时已经使用 12 （len = 12）待添加字符串长度为 3，需要修改为 15 + 15 + 1 = 31 字节。</li><li>如果此时的 len 长度大于 1MB，那么程序只会额外分配 1MB 的未使用空间，例如 30 MB + 1 MB + 1 byte</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 s 目前的空余空间长度</span></span><br><span class="line">   <span class="keyword">size_t</span> <span class="built_in">free</span> = sdsavail(s);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">size_t</span> len, newlen;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// s 目前的空余空间已经足够，无须再进行扩展，直接返回</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">free</span> &gt;= addlen) <span class="keyword">return</span> s;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 获取 s 目前已占用空间的长度</span></span><br><span class="line">   len = sdslen(s);</span><br><span class="line">   sh = (<span class="keyword">void</span>*) (s-(<span class="keyword">sizeof</span>(struct sdshdr)));</span><br><span class="line"></span><br><span class="line">   <span class="comment">// s 最少需要的长度</span></span><br><span class="line">   newlen = (len+addlen);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 根据新长度，为 s 分配新空间所需的大小SDS_MAX_PREALLOC = 1024 * 1024 (1MB)</span></span><br><span class="line">   <span class="keyword">if</span> (newlen &lt; SDS_MAX_PREALLOC)</span><br><span class="line">       <span class="comment">// 如果新长度小于 SDS_MAX_PREALLOC </span></span><br><span class="line">       <span class="comment">// 那么为它分配两倍于所需长度的空间</span></span><br><span class="line">       newlen *= <span class="number">2</span>;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">       <span class="comment">// 否则，分配长度为目前长度加上 SDS_MAX_PREALLOC</span></span><br><span class="line">       newlen += SDS_MAX_PREALLOC;</span><br><span class="line">   <span class="comment">// T = O(N)</span></span><br><span class="line"><span class="comment">//进行内存预分配</span></span><br><span class="line">   newsh = zrealloc(sh, <span class="keyword">sizeof</span>(struct sdshdr)+newlen+<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;下面的示例，SDS 初始值是一个 <code>hello</code>，len 长度为 5，此时没有进行预空间分配，所以 free 为 0。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/blog_img/SDS%281%29.png"></p><p>&emsp;&emsp;此时，进行字符串扩展操作，strcat(s1, “ Lee”)，首先需要进行预空间分配，因为 len 此时为 5，所以第一次扩展长度为 9 + 9 + 1 == 18byte。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/blog_img/SDS%282%29new.png"></p><h4 id="惰性空间释放"><a href="#惰性空间释放" class="headerlink" title="惰性空间释放"></a>惰性空间释放</h4><p>&emsp;&emsp;惰性空间释放优化 SDS 字符串缩短的操作，如果此时字符串的长度缩短，SDS 只会修改 len、free、buf的值，实际上并没有对剩余空间进行释放，造成一个已经释放的假象。这样做的好处：可以留下这部分未使用空间，等待将来增加字符串的操作时候使用。</p><p>&emsp;&emsp;下面将对 <code>hello</code> 这个字符串，进行惰性空间释放</p><p><img src= "/img/loading.gif" data-lazy-src="https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/blog_img/SDS%281%29.png"></p><p>&emsp;&emsp;删除 <code>lo</code> 这个字符串，变化之后的SDS，如图所示：</p><p><img src= "/img/loading.gif" data-lazy-src="https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/blog_img/SDS%283%29.png"></p><hr><h2 id="二进制安全"><a href="#二进制安全" class="headerlink" title="二进制安全"></a>二进制安全</h2><p>&emsp;&emsp;在 C 字符串中，遇到 <code>\0</code> 那么代表遍历结束，遇到了最后一个字符，但是，在SDS中 <code>\0</code> 并没有任何的意义，因为可以通过 len 来获取当前的实际数组长度，这样遍历的时候就确定了边界，从而达到数据写入的时候什么样子，那么遍历的时候就是什么样子。所以，SDS可以存储任意数据对象。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&emsp;&emsp;总结一下C 字符串和 SDS 之间的区别</p><table><thead><tr><th align="center">C字符串</th><th align="center">SDS</th></tr></thead><tbody><tr><td align="center">获取数组长度，时间复杂度为O(n)</td><td align="center">获取数组长度，时间复杂度为O(1)</td></tr><tr><td align="center">可能会造成缓冲区溢出</td><td align="center">不会造成缓冲区溢出</td></tr><tr><td align="center">每一次更新字符串，都需要进行内存分配</td><td align="center">每一次进行更新，不一定需要进行内存分配</td></tr><tr><td align="center">只能保存文本数据</td><td align="center">可以保存任何二进制数据</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
          <category> 原理篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> SDS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相信自己 相信未来~</title>
      <link href="2020/11/24/%E7%9B%B8%E4%BF%A1%E8%87%AA%E5%B7%B1-%E7%9B%B8%E4%BF%A1%E6%9C%AA%E6%9D%A5/"/>
      <url>2020/11/24/%E7%9B%B8%E4%BF%A1%E8%87%AA%E5%B7%B1-%E7%9B%B8%E4%BF%A1%E6%9C%AA%E6%9D%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;距离自己真正踏入互联网这个领域以来，已经过去半年多。在此想记录一些，个人的感悟，以及对未来的规划。本文写于2020年2月15日。</p><hr><h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p>&emsp;&emsp;本人，现就读于一所西安科技大学，一所普通的本科院校，计算机专业。可能自己对计算机有着某种特殊的缘分，从小到大，基本上是形影不离。但是，用途被我局限在了娱乐。因为性格原因，不善于人际交往，也因此被赋予了“高冷”这个称谓。自己平时特别喜欢边听着音乐边思考，沉浸在自己的小世界中。</p><hr><h2 id="遗憾"><a href="#遗憾" class="headerlink" title="遗憾"></a>遗憾</h2><p>&emsp;&emsp;每个人或多或少都有一些遗憾，而我最大的遗憾就是，在高三那年，因为自己的不努力、贪图一时的娱乐。最终导致去了一所双非大学。但自己却未有所改变，还是一如既往，沉迷在游戏的世界当中，每次考试都抱着飘过的态度，对学习、对未来、对自己没有一个目标。整天浑浑噩噩的，碌碌无为。不知道多年后自己，回想起这段时光，会不会痛揍自己…  </p><hr><h2 id="转折点"><a href="#转折点" class="headerlink" title="转折点"></a>转折点</h2><p>&emsp;&emsp;2019年夏天，对于我来说，是一个契机，也是一个转折点，同时也是我正式迈入计算机领域的Timing。通过暑期的课程设计，我突然发现自己菜的真实，一个计算机专业，竟然一些基础知识点都不知道，简简单单写出来一个HelloWorld程序，自己就得到了满足。所以，在课设的时候，我突然有了一个大胆的想法，自己单独去设计，同时也是激励自己，试着爆发一下内心中的潜能。事实证明，我做到了！通过不断查阅相关书籍，加上自己的动手能力，一个简单的单片机程序就被搞定了，最终也得到了老师的认可。  </p><p>&emsp;&emsp;这次课设结束后，我也逐渐开始关注一下技术公众号，在此，我力推一位UP主<a href="https://space.bilibili.com/384068749?from=search&seid=12457011306365006473">CodeSheep</a>，也是在羊哥的带领下，开始对Java有所了解，以及后端应该如何学习，面试的经验等等。通过梳理，列出了一份属于自己的后端学习计划，作为今后的学习目标。</p><hr><h2 id="转变"><a href="#转变" class="headerlink" title="转变"></a>转变</h2><p>&emsp;&emsp;在这之后，就是开始漫长的学习，展开一个比较疯狂下半年，基本上一天都在学习，图书馆、宿舍、食堂三点一线，实体书、电子书、Java基础、jvm、多线程、设计模式……看了一遍又一遍，期间一直在做笔记，虽然内容比较难嚼，但是可以读多遍，看看技术博客，再加上自己的理解，写成一篇笔记，方便日后查看。  </p><p>&emsp;&emsp;学习是枯燥的，尤其是在起初这段时间内，感觉书籍和我中间隔了一条银河，自己只有硬着头皮去读，反复阅读，终于第一本书<a href="https://book.douban.com/subject/2130190/">Java编程思想</a>看完，虽然内容比较基础，但是越是基础的东西最为重要，在这里想分享鸟哥的一句话：<strong>不要忘记，最先开始你是用什么关键词去搜索的。只有将基础性东西学好，其他的事物学起来会很快。</strong>  </p><div align=center><img width='150px' src= "/img/loading.gif" data-lazy-src='https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d0c1486128b14bc7be0b9a1bf18926ae~tplv-k3u1fbpfcp-zoom-1.image'></div><p>&emsp;&emsp;通过半年的努力，从对互联网技术一窍不通，到现在搭建一个个人博客网站。作为一个入门项目，从设计到开发，最后部署到服务器，中间遇到的bug数不胜数。像我这样一个普通的人，能走到今天这一步，那么我相信大多数人都可以，甚至比我走得更远。如果你没有达到，那就在努力一些，尝试一段时间逼自己去阅读、学习，让自己养成一个自主学习的习惯。  </p><hr><h2 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h2><p>&emsp;&emsp;短期的目标，就是通过不断的阅读+实践，让自己的知识在深度和广度都提升。还就是通过今年的秋招，可以顺利地拿到心仪的offer。朝着心中目标不断前进…  </p><hr><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>&emsp;&emsp;在这里，我特别想感谢一个人。让我感觉到了来自于别人的关心，虽然结局不是那么美好。最后，分享一句话：人生之路，只能走一次，我要尽我所能，勿以善小而不为，现在就马上行动，让自己的人生不留遗憾…</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人感想 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
